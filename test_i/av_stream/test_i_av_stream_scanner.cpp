
#define  YY_INT_ALIGNED long int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
#ifdef yy_create_buffer
#define AVStream_Scanner__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer AVStream_Scanner__create_buffer
#endif

#ifdef yy_delete_buffer
#define AVStream_Scanner__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer AVStream_Scanner__delete_buffer
#endif

#ifdef yy_scan_buffer
#define AVStream_Scanner__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer AVStream_Scanner__scan_buffer
#endif

#ifdef yy_scan_string
#define AVStream_Scanner__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string AVStream_Scanner__scan_string
#endif

#ifdef yy_scan_bytes
#define AVStream_Scanner__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes AVStream_Scanner__scan_bytes
#endif

#ifdef yy_init_buffer
#define AVStream_Scanner__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer AVStream_Scanner__init_buffer
#endif

#ifdef yy_flush_buffer
#define AVStream_Scanner__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer AVStream_Scanner__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define AVStream_Scanner__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state AVStream_Scanner__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define AVStream_Scanner__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer AVStream_Scanner__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define AVStream_Scanner_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state AVStream_Scanner_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define AVStream_Scanner_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state AVStream_Scanner_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define AVStream_Scanner_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack AVStream_Scanner_ensure_buffer_stack
#endif

#ifdef yylex
#define AVStream_Scanner_lex_ALREADY_DEFINED
#else
#define yylex AVStream_Scanner_lex
#endif

#ifdef yyrestart
#define AVStream_Scanner_restart_ALREADY_DEFINED
#else
#define yyrestart AVStream_Scanner_restart
#endif

#ifdef yylex_init
#define AVStream_Scanner_lex_init_ALREADY_DEFINED
#else
#define yylex_init AVStream_Scanner_lex_init
#endif

#ifdef yylex_init_extra
#define AVStream_Scanner_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra AVStream_Scanner_lex_init_extra
#endif

#ifdef yylex_destroy
#define AVStream_Scanner_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy AVStream_Scanner_lex_destroy
#endif

#ifdef yyget_debug
#define AVStream_Scanner_get_debug_ALREADY_DEFINED
#else
#define yyget_debug AVStream_Scanner_get_debug
#endif

#ifdef yyset_debug
#define AVStream_Scanner_set_debug_ALREADY_DEFINED
#else
#define yyset_debug AVStream_Scanner_set_debug
#endif

#ifdef yyget_extra
#define AVStream_Scanner_get_extra_ALREADY_DEFINED
#else
#define yyget_extra AVStream_Scanner_get_extra
#endif

#ifdef yyset_extra
#define AVStream_Scanner_set_extra_ALREADY_DEFINED
#else
#define yyset_extra AVStream_Scanner_set_extra
#endif

#ifdef yyget_in
#define AVStream_Scanner_get_in_ALREADY_DEFINED
#else
#define yyget_in AVStream_Scanner_get_in
#endif

#ifdef yyset_in
#define AVStream_Scanner_set_in_ALREADY_DEFINED
#else
#define yyset_in AVStream_Scanner_set_in
#endif

#ifdef yyget_out
#define AVStream_Scanner_get_out_ALREADY_DEFINED
#else
#define yyget_out AVStream_Scanner_get_out
#endif

#ifdef yyset_out
#define AVStream_Scanner_set_out_ALREADY_DEFINED
#else
#define yyset_out AVStream_Scanner_set_out
#endif

#ifdef yyget_leng
#define AVStream_Scanner_get_leng_ALREADY_DEFINED
#else
#define yyget_leng AVStream_Scanner_get_leng
#endif

#ifdef yyget_text
#define AVStream_Scanner_get_text_ALREADY_DEFINED
#else
#define yyget_text AVStream_Scanner_get_text
#endif

#ifdef yyget_lineno
#define AVStream_Scanner_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno AVStream_Scanner_get_lineno
#endif

#ifdef yyset_lineno
#define AVStream_Scanner_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno AVStream_Scanner_set_lineno
#endif

#ifdef yyget_column
#define AVStream_Scanner_get_column_ALREADY_DEFINED
#else
#define yyget_column AVStream_Scanner_get_column
#endif

#ifdef yyset_column
#define AVStream_Scanner_set_column_ALREADY_DEFINED
#else
#define yyset_column AVStream_Scanner_set_column
#endif

#ifdef yywrap
#define AVStream_Scanner_wrap_ALREADY_DEFINED
#else
#define yywrap AVStream_Scanner_wrap
#endif

/* %endif */

#ifdef yyget_lval
#define AVStream_Scanner_get_lval_ALREADY_DEFINED
#else
#define yyget_lval AVStream_Scanner_get_lval
#endif

#ifdef yyset_lval
#define AVStream_Scanner_set_lval_ALREADY_DEFINED
#else
#define yyset_lval AVStream_Scanner_set_lval
#endif

#ifdef yyget_lloc
#define AVStream_Scanner_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc AVStream_Scanner_get_lloc
#endif

#ifdef yyset_lloc
#define AVStream_Scanner_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc AVStream_Scanner_set_lloc
#endif

#ifdef yyalloc
#define AVStream_Scanner_alloc_ALREADY_DEFINED
#else
#define yyalloc AVStream_Scanner_alloc
#endif

#ifdef yyrealloc
#define AVStream_Scanner_realloc_ALREADY_DEFINED
#else
#define yyrealloc AVStream_Scanner_realloc
#endif

#ifdef yyfree
#define AVStream_Scanner_free_ALREADY_DEFINED
#else
#define yyfree AVStream_Scanner_free
#endif

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

/* %endif */

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

typedef const struct yy_trans_info *yy_state_type;

#define yytext_ptr yytext_r

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 6
#define YY_END_OF_BUFFER 7
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const struct yy_trans_info yy_transition[3874] =
    {
 {   0,   0 }, {   0,3618 }, {   0,   0 }, {   0,3616 }, {   1,2064 },
 {   2,2064 }, {   3,2064 }, {   4,2064 }, {   5,2064 }, {   6,2064 },
 {   7,2064 }, {   8,2064 }, {   9,2064 }, {  10,2064 }, {  11,2064 },
 {  12,2064 }, {  13,2064 }, {  14,2064 }, {  15,2064 }, {  16,2064 },
 {  17,2064 }, {  18,2064 }, {  19,2064 }, {  20,2064 }, {  21,2064 },
 {  22,2064 }, {  23,2064 }, {  24,2064 }, {  25,2064 }, {  26,2064 },
 {  27,2064 }, {  28,2064 }, {  29,2064 }, {  30,2064 }, {  31,2064 },
 {  32,2064 }, {  33,2064 }, {  34,2064 }, {  35,2064 }, {  36,2064 },
 {  37,2064 }, {  38,2064 }, {  39,2064 }, {  40,2064 }, {  41,2064 },
 {  42,2064 }, {  43,2064 }, {  44,2064 }, {  45,2064 }, {  46,2064 },

 {  47,2064 }, {  48,2064 }, {  49,2064 }, {  50,2064 }, {  51,2064 },
 {  52,2064 }, {  53,2064 }, {  54,2064 }, {  55,2064 }, {  56,2064 },
 {  57,2064 }, {  58,2064 }, {  59,2064 }, {  60,2064 }, {  61,2064 },
 {  62,2064 }, {  63,2064 }, {  64,2064 }, {  65,2064 }, {  66,2064 },
 {  67,2064 }, {  68,2064 }, {  69,2064 }, {  70,2064 }, {  71,2064 },
 {  72,2064 }, {  73,2064 }, {  74,2064 }, {  75,2064 }, {  76,2064 },
 {  77,2064 }, {  78,2064 }, {  79,2064 }, {  80,2064 }, {  81,2064 },
 {  82,2064 }, {  83,2064 }, {  84,2064 }, {  85,2064 }, {  86,2064 },
 {  87,2064 }, {  88,2064 }, {  89,2064 }, {  90,2064 }, {  91,2064 },
 {  92,2064 }, {  93,2064 }, {  94,2064 }, {  95,2064 }, {  96,2064 },

 {  97,2064 }, {  98,2064 }, {  99,2064 }, { 100,2064 }, { 101,2064 },
 { 102,2064 }, { 103,2064 }, { 104,2064 }, { 105,2064 }, { 106,2064 },
 { 107,2064 }, { 108,2064 }, { 109,2064 }, { 110,2064 }, { 111,2064 },
 { 112,2064 }, { 113,2064 }, { 114,2064 }, { 115,2064 }, { 116,2064 },
 { 117,2064 }, { 118,2064 }, { 119,2064 }, { 120,2064 }, { 121,2064 },
 { 122,2064 }, { 123,2064 }, { 124,2064 }, { 125,2064 }, { 126,2064 },
 { 127,2064 }, { 128,2064 }, { 129,2064 }, { 130,2064 }, { 131,2064 },
 { 132,2064 }, { 133,2064 }, { 134,2064 }, { 135,2064 }, { 136,2064 },
 { 137,2064 }, { 138,2064 }, { 139,2064 }, { 140,2064 }, { 141,2064 },
 { 142,2064 }, { 143,2064 }, { 144,2064 }, { 145,2064 }, { 146,2064 },

 { 147,2064 }, { 148,2064 }, { 149,2064 }, { 150,2064 }, { 151,2064 },
 { 152,2064 }, { 153,2064 }, { 154,2064 }, { 155,2064 }, { 156,2064 },
 { 157,2064 }, { 158,2064 }, { 159,2064 }, { 160,2064 }, { 161,2064 },
 { 162,2064 }, { 163,2064 }, { 164,2064 }, { 165,2064 }, { 166,2064 },
 { 167,2064 }, { 168,2064 }, { 169,2064 }, { 170,2064 }, { 171,2064 },
 { 172,2064 }, { 173,2064 }, { 174,2064 }, { 175,2064 }, { 176,2064 },
 { 177,2064 }, { 178,2064 }, { 179,2064 }, { 180,2064 }, { 181,2064 },
 { 182,2064 }, { 183,2064 }, { 184,2064 }, { 185,2064 }, { 186,2064 },
 { 187,2064 }, { 188,2064 }, { 189,2064 }, { 190,2064 }, { 191,2064 },
 { 192,2064 }, { 193,2064 }, { 194,2064 }, { 195,2064 }, { 196,2064 },

 { 197,2064 }, { 198,2064 }, { 199,2064 }, { 200,2064 }, { 201,2064 },
 { 202,2064 }, { 203,2064 }, { 204,2064 }, { 205,2064 }, { 206,2064 },
 { 207,2064 }, { 208,2064 }, { 209,2064 }, { 210,2064 }, { 211,2064 },
 { 212,2064 }, { 213,2064 }, { 214,2064 }, { 215,2064 }, { 216,2064 },
 { 217,2064 }, { 218,2064 }, { 219,2064 }, { 220,2064 }, { 221,2064 },
 { 222,2064 }, { 223,2064 }, { 224,2064 }, { 225,2064 }, { 226,2064 },
 { 227,2064 }, { 228,2064 }, { 229,2064 }, { 230,2064 }, { 231,2064 },
 { 232,2064 }, { 233,2064 }, { 234,2064 }, { 235,2064 }, { 236,2064 },
 { 237,2064 }, { 238,2064 }, { 239,2064 }, { 240,2064 }, { 241,2064 },
 { 242,2064 }, { 243,2064 }, { 244,2064 }, { 245,2064 }, { 246,2064 },

 { 247,2064 }, { 248,2064 }, { 249,2064 }, { 250,2064 }, { 251,2064 },
 { 252,2064 }, { 253,2064 }, { 254,2064 }, { 255,2064 }, { 256,2064 },
 {   0,   0 }, {   0,3358 }, {   1,1806 }, {   2,1806 }, {   3,1806 },
 {   4,1806 }, {   5,1806 }, {   6,1806 }, {   7,1806 }, {   8,1806 },
 {   9,1806 }, {  10,1806 }, {  11,1806 }, {  12,1806 }, {  13,1806 },
 {  14,1806 }, {  15,1806 }, {  16,1806 }, {  17,1806 }, {  18,1806 },
 {  19,1806 }, {  20,1806 }, {  21,1806 }, {  22,1806 }, {  23,1806 },
 {  24,1806 }, {  25,1806 }, {  26,1806 }, {  27,1806 }, {  28,1806 },
 {  29,1806 }, {  30,1806 }, {  31,1806 }, {  32,1806 }, {  33,1806 },
 {  34,1806 }, {  35,1806 }, {  36,1806 }, {  37,1806 }, {  38,1806 },

 {  39,1806 }, {  40,1806 }, {  41,1806 }, {  42,1806 }, {  43,1806 },
 {  44,1806 }, {  45,1806 }, {  46,1806 }, {  47,1806 }, {  48,1806 },
 {  49,1806 }, {  50,1806 }, {  51,1806 }, {  52,1806 }, {  53,1806 },
 {  54,1806 }, {  55,1806 }, {  56,1806 }, {  57,1806 }, {  58,1806 },
 {  59,1806 }, {  60,1806 }, {  61,1806 }, {  62,1806 }, {  63,1806 },
 {  64,1806 }, {  65,1806 }, {  66,1806 }, {  67,1806 }, {  68,1806 },
 {  69,1806 }, {  70,1806 }, {  71,1806 }, {  72,1806 }, {  73,1806 },
 {  74,1806 }, {  75,1806 }, {  76,1806 }, {  77,1806 }, {  78,1806 },
 {  79,1806 }, {  80,1806 }, {  81,1806 }, {  82,1806 }, {  83,1806 },
 {  84,1806 }, {  85,1806 }, {  86,1806 }, {  87,1806 }, {  88,1806 },

 {  89,1806 }, {  90,1806 }, {  91,1806 }, {  92,1806 }, {  93,1806 },
 {  94,1806 }, {  95,1806 }, {  96,1806 }, {  97,1806 }, {  98,1806 },
 {  99,1806 }, { 100,1806 }, { 101,1806 }, { 102,1806 }, { 103,1806 },
 { 104,1806 }, { 105,1806 }, { 106,1806 }, { 107,1806 }, { 108,1806 },
 { 109,1806 }, { 110,1806 }, { 111,1806 }, { 112,1806 }, { 113,1806 },
 { 114,1806 }, { 115,1806 }, { 116,1806 }, { 117,1806 }, { 118,1806 },
 { 119,1806 }, { 120,1806 }, { 121,1806 }, { 122,1806 }, { 123,1806 },
 { 124,1806 }, { 125,1806 }, { 126,1806 }, { 127,1806 }, { 128,1806 },
 { 129,1806 }, { 130,1806 }, { 131,1806 }, { 132,1806 }, { 133,1806 },
 { 134,1806 }, { 135,1806 }, { 136,1806 }, { 137,1806 }, { 138,1806 },

 { 139,1806 }, { 140,1806 }, { 141,1806 }, { 142,1806 }, { 143,1806 },
 { 144,1806 }, { 145,1806 }, { 146,1806 }, { 147,1806 }, { 148,1806 },
 { 149,1806 }, { 150,1806 }, { 151,1806 }, { 152,1806 }, { 153,1806 },
 { 154,1806 }, { 155,1806 }, { 156,1806 }, { 157,1806 }, { 158,1806 },
 { 159,1806 }, { 160,1806 }, { 161,1806 }, { 162,1806 }, { 163,1806 },
 { 164,1806 }, { 165,1806 }, { 166,1806 }, { 167,1806 }, { 168,1806 },
 { 169,1806 }, { 170,1806 }, { 171,1806 }, { 172,1806 }, { 173,1806 },
 { 174,1806 }, { 175,1806 }, { 176,1806 }, { 177,1806 }, { 178,1806 },
 { 179,1806 }, { 180,1806 }, { 181,1806 }, { 182,1806 }, { 183,1806 },
 { 184,1806 }, { 185,1806 }, { 186,1806 }, { 187,1806 }, { 188,1806 },

 { 189,1806 }, { 190,1806 }, { 191,1806 }, { 192,1806 }, { 193,1806 },
 { 194,1806 }, { 195,1806 }, { 196,1806 }, { 197,1806 }, { 198,1806 },
 { 199,1806 }, { 200,1806 }, { 201,1806 }, { 202,1806 }, { 203,1806 },
 { 204,1806 }, { 205,1806 }, { 206,1806 }, { 207,1806 }, { 208,1806 },
 { 209,1806 }, { 210,1806 }, { 211,1806 }, { 212,1806 }, { 213,1806 },
 { 214,1806 }, { 215,1806 }, { 216,1806 }, { 217,1806 }, { 218,1806 },
 { 219,1806 }, { 220,1806 }, { 221,1806 }, { 222,1806 }, { 223,1806 },
 { 224,1806 }, { 225,1806 }, { 226,1806 }, { 227,1806 }, { 228,1806 },
 { 229,1806 }, { 230,1806 }, { 231,1806 }, { 232,1806 }, { 233,1806 },
 { 234,1806 }, { 235,1806 }, { 236,1806 }, { 237,1806 }, { 238,1806 },

 { 239,1806 }, { 240,1806 }, { 241,1806 }, { 242,1806 }, { 243,1806 },
 { 244,1806 }, { 245,1806 }, { 246,1806 }, { 247,1806 }, { 248,1806 },
 { 249,1806 }, { 250,1806 }, { 251,1806 }, { 252,1806 }, { 253,1806 },
 { 254,1806 }, { 255,1806 }, { 256,1806 }, {   0,   0 }, {   0,3100 },
 {   1,1550 }, {   2,1550 }, {   3,1550 }, {   4,1550 }, {   5,1550 },
 {   6,1550 }, {   7,1550 }, {   8,1550 }, {   9,1550 }, {  10,1550 },
 {  11,1550 }, {  12,1550 }, {  13,1550 }, {  14,1550 }, {  15,1550 },
 {  16,1550 }, {  17,1550 }, {  18,1550 }, {  19,1550 }, {  20,1550 },
 {  21,1550 }, {  22,1550 }, {  23,1550 }, {  24,1550 }, {  25,1550 },
 {  26,1550 }, {  27,1550 }, {  28,1550 }, {  29,1550 }, {  30,1550 },

 {  31,1550 }, {  32,1550 }, {  33,1550 }, {  34,1550 }, {  35,1550 },
 {  36,1550 }, {  37,1550 }, {  38,1550 }, {  39,1550 }, {  40,1550 },
 {  41,1550 }, {  42,1550 }, {  43,1550 }, {  44,1550 }, {  45,1550 },
 {  46,1550 }, {  47,1550 }, {  48,1550 }, {  49,1550 }, {  50,1550 },
 {  51,1550 }, {  52,1550 }, {  53,1550 }, {  54,1550 }, {  55,1550 },
 {  56,1550 }, {  57,1550 }, {  58,1550 }, {  59,1550 }, {  60,1550 },
 {  61,1550 }, {  62,1550 }, {  63,1550 }, {  64,1550 }, {  65,1550 },
 {  66,1550 }, {  67,1550 }, {  68,1550 }, {  69,1550 }, {  70,1550 },
 {  71,1550 }, {  72,1550 }, {  73,1550 }, {  74,1550 }, {  75,1550 },
 {  76,1550 }, {  77,1550 }, {  78,1550 }, {  79,1550 }, {  80,1550 },

 {  81,1550 }, {  82,1550 }, {  83,1550 }, {  84,1550 }, {  85,1550 },
 {  86,1550 }, {  87,1550 }, {  88,1550 }, {  89,1550 }, {  90,1550 },
 {  91,1550 }, {  92,1550 }, {  93,1550 }, {  94,1550 }, {  95,1550 },
 {  96,1550 }, {  97,1550 }, {  98,1550 }, {  99,1550 }, { 100,1550 },
 { 101,1550 }, { 102,1550 }, { 103,1550 }, { 104,1550 }, { 105,1550 },
 { 106,1550 }, { 107,1550 }, { 108,1550 }, { 109,1550 }, { 110,1550 },
 { 111,1550 }, { 112,1550 }, { 113,1550 }, { 114,1550 }, { 115,1550 },
 { 116,1550 }, { 117,1550 }, { 118,1550 }, { 119,1550 }, { 120,1550 },
 { 121,1550 }, { 122,1550 }, { 123,1550 }, { 124,1550 }, { 125,1550 },
 { 126,1550 }, { 127,1550 }, { 128,1550 }, { 129,1550 }, { 130,1550 },

 { 131,1550 }, { 132,1550 }, { 133,1550 }, { 134,1550 }, { 135,1550 },
 { 136,1550 }, { 137,1550 }, { 138,1550 }, { 139,1550 }, { 140,1550 },
 { 141,1550 }, { 142,1550 }, { 143,1550 }, { 144,1550 }, { 145,1550 },
 { 146,1550 }, { 147,1550 }, { 148,1550 }, { 149,1550 }, { 150,1550 },
 { 151,1550 }, { 152,1550 }, { 153,1550 }, { 154,1550 }, { 155,1550 },
 { 156,1550 }, { 157,1550 }, { 158,1550 }, { 159,1550 }, { 160,1550 },
 { 161,1550 }, { 162,1550 }, { 163,1550 }, { 164,1550 }, { 165,1550 },
 { 166,1550 }, { 167,1550 }, { 168,1550 }, { 169,1550 }, { 170,1550 },
 { 171,1550 }, { 172,1550 }, { 173,1550 }, { 174,1550 }, { 175,1550 },
 { 176,1550 }, { 177,1550 }, { 178,1550 }, { 179,1550 }, { 180,1550 },

 { 181,1550 }, { 182,1550 }, { 183,1550 }, { 184,1550 }, { 185,1550 },
 { 186,1550 }, { 187,1550 }, { 188,1550 }, { 189,1550 }, { 190,1550 },
 { 191,1550 }, { 192,1550 }, { 193,1550 }, { 194,1550 }, { 195,1550 },
 { 196,1550 }, { 197,1550 }, { 198,1550 }, { 199,1550 }, { 200,1550 },
 { 201,1550 }, { 202,1550 }, { 203,1550 }, { 204,1550 }, { 205,1550 },
 { 206,1550 }, { 207,1550 }, { 208,1550 }, { 209,1550 }, { 210,1550 },
 { 211,1550 }, { 212,1550 }, { 213,1550 }, { 214,1550 }, { 215,1550 },
 { 216,1550 }, { 217,1550 }, { 218,1550 }, { 219,1550 }, { 220,1550 },
 { 221,1550 }, { 222,1550 }, { 223,1550 }, { 224,1550 }, { 225,1550 },
 { 226,1550 }, { 227,1550 }, { 228,1550 }, { 229,1550 }, { 230,1550 },

 { 231,1550 }, { 232,1550 }, { 233,1550 }, { 234,1550 }, { 235,1550 },
 { 236,1550 }, { 237,1550 }, { 238,1550 }, { 239,1550 }, { 240,1550 },
 { 241,1550 }, { 242,1550 }, { 243,1550 }, { 244,1550 }, { 245,1550 },
 { 246,1550 }, { 247,1550 }, { 248,1550 }, { 249,1550 }, { 250,1550 },
 { 251,1550 }, { 252,1550 }, { 253,1550 }, { 254,1550 }, { 255,1550 },
 { 256,1550 }, {   0,   0 }, {   0,2842 }, {   1,1292 }, {   2,1292 },
 {   3,1292 }, {   4,1292 }, {   5,1292 }, {   6,1292 }, {   7,1292 },
 {   8,1292 }, {   9,1292 }, {  10,1292 }, {  11,1292 }, {  12,1292 },
 {  13,1292 }, {  14,1292 }, {  15,1292 }, {  16,1292 }, {  17,1292 },
 {  18,1292 }, {  19,1292 }, {  20,1292 }, {  21,1292 }, {  22,1292 },

 {  23,1292 }, {  24,1292 }, {  25,1292 }, {  26,1292 }, {  27,1292 },
 {  28,1292 }, {  29,1292 }, {  30,1292 }, {  31,1292 }, {  32,1292 },
 {  33,1292 }, {  34,1292 }, {  35,1292 }, {  36,1292 }, {  37,1292 },
 {  38,1292 }, {  39,1292 }, {  40,1292 }, {  41,1292 }, {  42,1292 },
 {  43,1292 }, {  44,1292 }, {  45,1292 }, {  46,1292 }, {  47,1292 },
 {  48,1292 }, {  49,1292 }, {  50,1292 }, {  51,1292 }, {  52,1292 },
 {  53,1292 }, {  54,1292 }, {  55,1292 }, {  56,1292 }, {  57,1292 },
 {  58,1292 }, {  59,1292 }, {  60,1292 }, {  61,1292 }, {  62,1292 },
 {  63,1292 }, {  64,1292 }, {  65,1292 }, {  66,1292 }, {  67,1292 },
 {  68,1292 }, {  69,1292 }, {  70,1292 }, {  71,1292 }, {  72,1292 },

 {  73,1292 }, {  74,1292 }, {  75,1292 }, {  76,1292 }, {  77,1292 },
 {  78,1292 }, {  79,1292 }, {  80,1292 }, {  81,1292 }, {  82,1292 },
 {  83,1292 }, {  84,1292 }, {  85,1292 }, {  86,1292 }, {  87,1292 },
 {  88,1292 }, {  89,1292 }, {  90,1292 }, {  91,1292 }, {  92,1292 },
 {  93,1292 }, {  94,1292 }, {  95,1292 }, {  96,1292 }, {  97,1292 },
 {  98,1292 }, {  99,1292 }, { 100,1292 }, { 101,1292 }, { 102,1292 },
 { 103,1292 }, { 104,1292 }, { 105,1292 }, { 106,1292 }, { 107,1292 },
 { 108,1292 }, { 109,1292 }, { 110,1292 }, { 111,1292 }, { 112,1292 },
 { 113,1292 }, { 114,1292 }, { 115,1292 }, { 116,1292 }, { 117,1292 },
 { 118,1292 }, { 119,1292 }, { 120,1292 }, { 121,1292 }, { 122,1292 },

 { 123,1292 }, { 124,1292 }, { 125,1292 }, { 126,1292 }, { 127,1292 },
 { 128,1292 }, { 129,1292 }, { 130,1292 }, { 131,1292 }, { 132,1292 },
 { 133,1292 }, { 134,1292 }, { 135,1292 }, { 136,1292 }, { 137,1292 },
 { 138,1292 }, { 139,1292 }, { 140,1292 }, { 141,1292 }, { 142,1292 },
 { 143,1292 }, { 144,1292 }, { 145,1292 }, { 146,1292 }, { 147,1292 },
 { 148,1292 }, { 149,1292 }, { 150,1292 }, { 151,1292 }, { 152,1292 },
 { 153,1292 }, { 154,1292 }, { 155,1292 }, { 156,1292 }, { 157,1292 },
 { 158,1292 }, { 159,1292 }, { 160,1292 }, { 161,1292 }, { 162,1292 },
 { 163,1292 }, { 164,1292 }, { 165,1292 }, { 166,1292 }, { 167,1292 },
 { 168,1292 }, { 169,1292 }, { 170,1292 }, { 171,1292 }, { 172,1292 },

 { 173,1292 }, { 174,1292 }, { 175,1292 }, { 176,1292 }, { 177,1292 },
 { 178,1292 }, { 179,1292 }, { 180,1292 }, { 181,1292 }, { 182,1292 },
 { 183,1292 }, { 184,1292 }, { 185,1292 }, { 186,1292 }, { 187,1292 },
 { 188,1292 }, { 189,1292 }, { 190,1292 }, { 191,1292 }, { 192,1292 },
 { 193,1292 }, { 194,1292 }, { 195,1292 }, { 196,1292 }, { 197,1292 },
 { 198,1292 }, { 199,1292 }, { 200,1292 }, { 201,1292 }, { 202,1292 },
 { 203,1292 }, { 204,1292 }, { 205,1292 }, { 206,1292 }, { 207,1292 },
 { 208,1292 }, { 209,1292 }, { 210,1292 }, { 211,1292 }, { 212,1292 },
 { 213,1292 }, { 214,1292 }, { 215,1292 }, { 216,1292 }, { 217,1292 },
 { 218,1292 }, { 219,1292 }, { 220,1292 }, { 221,1292 }, { 222,1292 },

 { 223,1292 }, { 224,1292 }, { 225,1292 }, { 226,1292 }, { 227,1292 },
 { 228,1292 }, { 229,1292 }, { 230,1292 }, { 231,1292 }, { 232,1292 },
 { 233,1292 }, { 234,1292 }, { 235,1292 }, { 236,1292 }, { 237,1292 },
 { 238,1292 }, { 239,1292 }, { 240,1292 }, { 241,1292 }, { 242,1292 },
 { 243,1292 }, { 244,1292 }, { 245,1292 }, { 246,1292 }, { 247,1292 },
 { 248,1292 }, { 249,1292 }, { 250,1292 }, { 251,1292 }, { 252,1292 },
 { 253,1292 }, { 254,1292 }, { 255,1292 }, { 256,1292 }, {   0,   0 },
 {   0,2584 }, {   1,1036 }, {   2,1036 }, {   3,1036 }, {   4,1036 },
 {   5,1036 }, {   6,1036 }, {   7,1036 }, {   8,1036 }, {   9,1036 },
 {  10,1036 }, {  11,1036 }, {  12,1036 }, {  13,1036 }, {  14,1036 },

 {  15,1036 }, {  16,1036 }, {  17,1036 }, {  18,1036 }, {  19,1036 },
 {  20,1036 }, {  21,1036 }, {  22,1036 }, {  23,1036 }, {  24,1036 },
 {  25,1036 }, {  26,1036 }, {  27,1036 }, {  28,1036 }, {  29,1036 },
 {  30,1036 }, {  31,1036 }, {  32,1036 }, {  33,1036 }, {  34,1036 },
 {  35,1036 }, {  36,1036 }, {  37,1036 }, {  38,1036 }, {  39,1036 },
 {  40,1036 }, {  41,1036 }, {  42,1036 }, {  43,1036 }, {  44,1036 },
 {  45,1036 }, {  46,1036 }, {  47,1036 }, {  48,1036 }, {  49,1036 },
 {  50,1036 }, {  51,1036 }, {  52,1036 }, {  53,1036 }, {  54,1036 },
 {  55,1036 }, {  56,1036 }, {  57,1036 }, {  58,1036 }, {  59,1036 },
 {  60,1036 }, {  61,1036 }, {  62,1036 }, {  63,1036 }, {  64,1036 },

 {  65,1036 }, {  66,1036 }, {  67,1036 }, {  68,1036 }, {  69,1036 },
 {  70,1036 }, {  71,1036 }, {  72,1036 }, {  73,1036 }, {  74,1036 },
 {  75,1036 }, {  76,1036 }, {  77,1036 }, {  78,1036 }, {  79,1036 },
 {  80,1036 }, {  81,1036 }, {  82,1036 }, {  83,1036 }, {  84,1036 },
 {  85,1036 }, {  86,1036 }, {  87,1036 }, {  88,1036 }, {  89,1036 },
 {  90,1036 }, {  91,1036 }, {  92,1036 }, {  93,1036 }, {  94,1036 },
 {  95,1036 }, {  96,1036 }, {  97,1036 }, {  98,1036 }, {  99,1036 },
 { 100,1036 }, { 101,1036 }, { 102,1036 }, { 103,1036 }, { 104,1036 },
 { 105,1036 }, { 106,1036 }, { 107,1036 }, { 108,1036 }, { 109,1036 },
 { 110,1036 }, { 111,1036 }, { 112,1036 }, { 113,1036 }, { 114,1036 },

 { 115,1036 }, { 116,1036 }, { 117,1036 }, { 118,1036 }, { 119,1036 },
 { 120,1036 }, { 121,1036 }, { 122,1036 }, { 123,1036 }, { 124,1036 },
 { 125,1036 }, { 126,1036 }, { 127,1036 }, { 128,1036 }, { 129,1036 },
 { 130,1036 }, { 131,1036 }, { 132,1036 }, { 133,1036 }, { 134,1036 },
 { 135,1036 }, { 136,1036 }, { 137,1036 }, { 138,1036 }, { 139,1036 },
 { 140,1036 }, { 141,1036 }, { 142,1036 }, { 143,1036 }, { 144,1036 },
 { 145,1036 }, { 146,1036 }, { 147,1036 }, { 148,1036 }, { 149,1036 },
 { 150,1036 }, { 151,1036 }, { 152,1036 }, { 153,1036 }, { 154,1036 },
 { 155,1036 }, { 156,1036 }, { 157,1036 }, { 158,1036 }, { 159,1036 },
 { 160,1036 }, { 161,1036 }, { 162,1036 }, { 163,1036 }, { 164,1036 },

 { 165,1036 }, { 166,1036 }, { 167,1036 }, { 168,1036 }, { 169,1036 },
 { 170,1036 }, { 171,1036 }, { 172,1036 }, { 173,1036 }, { 174,1036 },
 { 175,1036 }, { 176,1036 }, { 177,1036 }, { 178,1036 }, { 179,1036 },
 { 180,1036 }, { 181,1036 }, { 182,1036 }, { 183,1036 }, { 184,1036 },
 { 185,1036 }, { 186,1036 }, { 187,1036 }, { 188,1036 }, { 189,1036 },
 { 190,1036 }, { 191,1036 }, { 192,1036 }, { 193,1036 }, { 194,1036 },
 { 195,1036 }, { 196,1036 }, { 197,1036 }, { 198,1036 }, { 199,1036 },
 { 200,1036 }, { 201,1036 }, { 202,1036 }, { 203,1036 }, { 204,1036 },
 { 205,1036 }, { 206,1036 }, { 207,1036 }, { 208,1036 }, { 209,1036 },
 { 210,1036 }, { 211,1036 }, { 212,1036 }, { 213,1036 }, { 214,1036 },

 { 215,1036 }, { 216,1036 }, { 217,1036 }, { 218,1036 }, { 219,1036 },
 { 220,1036 }, { 221,1036 }, { 222,1036 }, { 223,1036 }, { 224,1036 },
 { 225,1036 }, { 226,1036 }, { 227,1036 }, { 228,1036 }, { 229,1036 },
 { 230,1036 }, { 231,1036 }, { 232,1036 }, { 233,1036 }, { 234,1036 },
 { 235,1036 }, { 236,1036 }, { 237,1036 }, { 238,1036 }, { 239,1036 },
 { 240,1036 }, { 241,1036 }, { 242,1036 }, { 243,1036 }, { 244,1036 },
 { 245,1036 }, { 246,1036 }, { 247,1036 }, { 248,1036 }, { 249,1036 },
 { 250,1036 }, { 251,1036 }, { 252,1036 }, { 253,1036 }, { 254,1036 },
 { 255,1036 }, { 256,1036 }, {   0,   0 }, {   0,2326 }, {   1, 778 },
 {   2, 778 }, {   3, 778 }, {   4, 778 }, {   5, 778 }, {   6, 778 },

 {   7, 778 }, {   8, 778 }, {   9, 778 }, {  10, 778 }, {  11, 778 },
 {  12, 778 }, {  13, 778 }, {  14, 778 }, {  15, 778 }, {  16, 778 },
 {  17, 778 }, {  18, 778 }, {  19, 778 }, {  20, 778 }, {  21, 778 },
 {  22, 778 }, {  23, 778 }, {  24, 778 }, {  25, 778 }, {  26, 778 },
 {  27, 778 }, {  28, 778 }, {  29, 778 }, {  30, 778 }, {  31, 778 },
 {  32, 778 }, {  33, 778 }, {  34, 778 }, {  35, 778 }, {  36, 778 },
 {  37, 778 }, {  38, 778 }, {  39, 778 }, {  40, 778 }, {  41, 778 },
 {  42, 778 }, {  43, 778 }, {  44, 778 }, {  45, 778 }, {  46, 778 },
 {  47, 778 }, {  48, 778 }, {  49, 778 }, {  50, 778 }, {  51, 778 },
 {  52, 778 }, {  53, 778 }, {  54, 778 }, {  55, 778 }, {  56, 778 },

 {  57, 778 }, {  58, 778 }, {  59, 778 }, {  60, 778 }, {  61, 778 },
 {  62, 778 }, {  63, 778 }, {  64, 778 }, {  65, 778 }, {  66, 778 },
 {  67, 778 }, {  68, 778 }, {  69, 778 }, {  70, 778 }, {  71, 778 },
 {  72, 778 }, {  73, 778 }, {  74, 778 }, {  75, 778 }, {  76, 778 },
 {  77, 778 }, {  78, 778 }, {  79, 778 }, {  80, 778 }, {  81, 778 },
 {  82, 778 }, {  83, 778 }, {  84, 778 }, {  85, 778 }, {  86, 778 },
 {  87, 778 }, {  88, 778 }, {  89, 778 }, {  90, 778 }, {  91, 778 },
 {  92, 778 }, {  93, 778 }, {  94, 778 }, {  95, 778 }, {  96, 778 },
 {  97, 778 }, {  98, 778 }, {  99, 778 }, { 100, 778 }, { 101, 778 },
 { 102, 778 }, { 103, 778 }, { 104, 778 }, { 105, 778 }, { 106, 778 },

 { 107, 778 }, { 108, 778 }, { 109, 778 }, { 110, 778 }, { 111, 778 },
 { 112, 778 }, { 113, 778 }, { 114, 778 }, { 115, 778 }, { 116, 778 },
 { 117, 778 }, { 118, 778 }, { 119, 778 }, { 120, 778 }, { 121, 778 },
 { 122, 778 }, { 123, 778 }, { 124, 778 }, { 125, 778 }, { 126, 778 },
 { 127, 778 }, { 128, 778 }, { 129, 778 }, { 130, 778 }, { 131, 778 },
 { 132, 778 }, { 133, 778 }, { 134, 778 }, { 135, 778 }, { 136, 778 },
 { 137, 778 }, { 138, 778 }, { 139, 778 }, { 140, 778 }, { 141, 778 },
 { 142, 778 }, { 143, 778 }, { 144, 778 }, { 145, 778 }, { 146, 778 },
 { 147, 778 }, { 148, 778 }, { 149, 778 }, { 150, 778 }, { 151, 778 },
 { 152, 778 }, { 153, 778 }, { 154, 778 }, { 155, 778 }, { 156, 778 },

 { 157, 778 }, { 158, 778 }, { 159, 778 }, { 160, 778 }, { 161, 778 },
 { 162, 778 }, { 163, 778 }, { 164, 778 }, { 165, 778 }, { 166, 778 },
 { 167, 778 }, { 168, 778 }, { 169, 778 }, { 170, 778 }, { 171, 778 },
 { 172, 778 }, { 173, 778 }, { 174, 778 }, { 175, 778 }, { 176, 778 },
 { 177, 778 }, { 178, 778 }, { 179, 778 }, { 180, 778 }, { 181, 778 },
 { 182, 778 }, { 183, 778 }, { 184, 778 }, { 185, 778 }, { 186, 778 },
 { 187, 778 }, { 188, 778 }, { 189, 778 }, { 190, 778 }, { 191, 778 },
 { 192, 778 }, { 193, 778 }, { 194, 778 }, { 195, 778 }, { 196, 778 },
 { 197, 778 }, { 198, 778 }, { 199, 778 }, { 200, 778 }, { 201, 778 },
 { 202, 778 }, { 203, 778 }, { 204, 778 }, { 205, 778 }, { 206, 778 },

 { 207, 778 }, { 208, 778 }, { 209, 778 }, { 210, 778 }, { 211, 778 },
 { 212, 778 }, { 213, 778 }, { 214, 778 }, { 215, 778 }, { 216, 778 },
 { 217, 778 }, { 218, 778 }, { 219, 778 }, { 220, 778 }, { 221, 778 },
 { 222, 778 }, { 223, 778 }, { 224, 778 }, { 225, 778 }, { 226, 778 },
 { 227, 778 }, { 228, 778 }, { 229, 778 }, { 230, 778 }, { 231, 778 },
 { 232, 778 }, { 233, 778 }, { 234, 778 }, { 235, 778 }, { 236, 778 },
 { 237, 778 }, { 238, 778 }, { 239, 778 }, { 240, 778 }, { 241, 778 },
 { 242, 778 }, { 243, 778 }, { 244, 778 }, { 245, 778 }, { 246, 778 },
 { 247, 778 }, { 248, 778 }, { 249, 778 }, { 250, 778 }, { 251, 778 },
 { 252, 778 }, { 253, 778 }, { 254, 778 }, { 255, 778 }, { 256, 778 },

 {   0,   0 }, {   0,2068 }, {   1, 778 }, {   2, 778 }, {   3, 778 },
 {   4, 778 }, {   5, 778 }, {   6, 778 }, {   7, 778 }, {   8, 778 },
 {   9, 778 }, {  10, 778 }, {  11, 778 }, {  12, 778 }, {  13, 778 },
 {  14, 778 }, {  15, 778 }, {  16, 778 }, {  17, 778 }, {  18, 778 },
 {  19, 778 }, {  20, 778 }, {  21, 778 }, {  22, 778 }, {  23, 778 },
 {  24, 778 }, {  25, 778 }, {  26, 778 }, {  27, 778 }, {  28, 778 },
 {  29, 778 }, {  30, 778 }, {  31, 778 }, {  32, 778 }, {  33, 778 },
 {  34, 778 }, {  35, 778 }, {  36, 778 }, {  37, 778 }, {  38, 778 },
 {  39, 778 }, {  40, 778 }, {  41, 778 }, {  42, 778 }, {  43, 778 },
 {  44, 778 }, {  45, 778 }, {  46, 778 }, {  47, 778 }, {  48, 778 },

 {  49, 778 }, {  50, 778 }, {  51, 778 }, {  52, 778 }, {  53, 778 },
 {  54, 778 }, {  55, 778 }, {  56, 778 }, {  57, 778 }, {  58, 778 },
 {  59, 778 }, {  60, 778 }, {  61, 778 }, {  62, 778 }, {  63, 778 },
 {  64, 778 }, {  65, 778 }, {  66, 778 }, {  67, 778 }, {  68, 778 },
 {  69, 778 }, {  70, 778 }, {  71, 778 }, {  72, 778 }, {  73, 778 },
 {  74, 778 }, {  75, 778 }, {  76, 778 }, {  77, 778 }, {  78, 778 },
 {  79, 778 }, {  80, 778 }, {  81, 778 }, {  82, 778 }, {  83, 778 },
 {  84, 778 }, {  85, 778 }, {  86, 778 }, {  87, 778 }, {  88, 778 },
 {  89, 778 }, {  90, 778 }, {  91, 778 }, {  92, 778 }, {  93, 778 },
 {  94, 778 }, {  95, 778 }, {  96, 778 }, {  97, 778 }, {  98, 778 },

 {  99, 778 }, { 100, 778 }, { 101, 778 }, { 102, 778 }, { 103, 778 },
 { 104, 778 }, { 105, 778 }, { 106, 778 }, { 107, 778 }, { 108, 778 },
 { 109, 778 }, { 110, 778 }, { 111, 778 }, { 112, 778 }, { 113, 778 },
 { 114, 778 }, { 115, 778 }, { 116, 778 }, { 117, 778 }, { 118, 778 },
 { 119, 778 }, { 120, 778 }, { 121, 778 }, { 122, 778 }, { 123, 778 },
 { 124, 778 }, { 125, 778 }, { 126, 778 }, { 127, 778 }, { 128, 778 },
 { 129, 778 }, { 130, 778 }, { 131, 778 }, { 132, 778 }, { 133, 778 },
 { 134, 778 }, { 135, 778 }, { 136, 778 }, { 137, 778 }, { 138, 778 },
 { 139, 778 }, { 140, 778 }, { 141, 778 }, { 142, 778 }, { 143, 778 },
 { 144, 778 }, { 145, 778 }, { 146, 778 }, { 147, 778 }, { 148, 778 },

 { 149, 778 }, { 150, 778 }, { 151, 778 }, { 152, 778 }, { 153, 778 },
 { 154, 778 }, { 155, 778 }, { 156, 778 }, { 157, 778 }, { 158, 778 },
 { 159, 778 }, { 160, 778 }, { 161, 778 }, { 162, 778 }, { 163, 778 },
 { 164, 778 }, { 165, 778 }, { 166, 778 }, { 167, 778 }, { 168, 778 },
 { 169, 778 }, { 170, 778 }, { 171, 778 }, { 172, 778 }, { 173, 778 },
 { 174, 778 }, { 175, 778 }, { 176, 778 }, { 177, 778 }, { 178, 778 },
 { 179, 778 }, { 180, 778 }, { 181, 778 }, { 182, 778 }, { 183, 778 },
 { 184, 778 }, { 185, 778 }, { 186, 778 }, { 187, 778 }, { 188, 778 },
 { 189, 778 }, { 190, 778 }, { 191, 778 }, { 192, 778 }, { 193, 778 },
 { 194, 778 }, { 195, 778 }, { 196, 778 }, { 197, 778 }, { 198, 778 },

 { 199, 778 }, { 200, 778 }, { 201, 778 }, { 202, 778 }, { 203, 778 },
 { 204, 778 }, { 205, 778 }, { 206, 778 }, { 207, 778 }, { 208, 778 },
 { 209, 778 }, { 210, 778 }, { 211, 778 }, { 212, 778 }, { 213, 778 },
 { 214, 778 }, { 215, 778 }, { 216, 778 }, { 217, 778 }, { 218, 778 },
 { 219, 778 }, { 220, 778 }, { 221, 778 }, { 222, 778 }, { 223, 778 },
 { 224, 778 }, { 225, 778 }, { 226, 778 }, { 227, 778 }, { 228, 778 },
 { 229, 778 }, { 230, 778 }, { 231, 778 }, { 232, 778 }, { 233, 778 },
 { 234, 778 }, { 235, 778 }, { 236, 778 }, { 237, 778 }, { 238, 778 },
 { 239, 778 }, { 240, 778 }, { 241, 778 }, { 242, 778 }, { 243, 778 },
 { 244, 778 }, { 245, 778 }, { 246, 778 }, { 247, 778 }, { 248, 778 },

 { 249, 778 }, { 250, 778 }, { 251, 778 }, { 252, 778 }, { 253, 778 },
 { 254, 778 }, { 255, 778 }, { 256, 778 }, {   0,   0 }, {   0,1810 },
 {   1, 520 }, {   2, 520 }, {   3, 520 }, {   4, 520 }, {   5, 520 },
 {   6, 520 }, {   7, 520 }, {   8, 520 }, {   9, 520 }, {  10, 520 },
 {  11, 520 }, {  12, 520 }, {  13, 520 }, {  14, 520 }, {  15, 520 },
 {  16, 520 }, {  17, 520 }, {  18, 520 }, {  19, 520 }, {  20, 520 },
 {  21, 520 }, {  22, 520 }, {  23, 520 }, {  24, 520 }, {  25, 520 },
 {  26, 520 }, {  27, 520 }, {  28, 520 }, {  29, 520 }, {  30, 520 },
 {  31, 520 }, {  32, 520 }, {  33, 520 }, {  34, 520 }, {  35, 520 },
 {  36, 520 }, {  37, 520 }, {  38, 520 }, {  39, 520 }, {  40, 520 },

 {  41, 520 }, {  42, 520 }, {  43, 520 }, {  44, 520 }, {  45, 520 },
 {  46, 520 }, {  47, 520 }, {  48, 520 }, {  49, 520 }, {  50, 520 },
 {  51, 520 }, {  52, 520 }, {  53, 520 }, {  54, 520 }, {  55, 520 },
 {  56, 520 }, {  57, 520 }, {  58, 520 }, {  59, 520 }, {  60, 520 },
 {  61, 520 }, {  62, 520 }, {  63, 520 }, {  64, 520 }, {  65, 520 },
 {  66, 520 }, {  67, 520 }, {  68, 520 }, {  69, 520 }, {  70, 520 },
 {  71, 520 }, {  72, 520 }, {  73, 520 }, {  74, 520 }, {  75, 520 },
 {  76, 520 }, {  77, 520 }, {  78, 520 }, {  79, 520 }, {  80, 520 },
 {  81, 520 }, {  82, 520 }, {  83, 520 }, {  84, 520 }, {  85, 520 },
 {  86, 520 }, {  87, 520 }, {  88, 520 }, {  89, 520 }, {  90, 520 },

 {  91, 520 }, {  92, 520 }, {  93, 520 }, {  94, 520 }, {  95, 520 },
 {  96, 520 }, {  97, 520 }, {  98, 520 }, {  99, 520 }, { 100, 520 },
 { 101, 520 }, { 102, 520 }, { 103, 520 }, { 104, 520 }, { 105, 520 },
 { 106, 520 }, { 107, 520 }, { 108, 520 }, { 109, 520 }, { 110, 520 },
 { 111, 520 }, { 112, 520 }, { 113, 520 }, { 114, 520 }, { 115, 520 },
 { 116, 520 }, { 117, 520 }, { 118, 520 }, { 119, 520 }, { 120, 520 },
 { 121, 520 }, { 122, 520 }, { 123, 520 }, { 124, 520 }, { 125, 520 },
 { 126, 520 }, { 127, 520 }, { 128, 520 }, { 129, 520 }, { 130, 520 },
 { 131, 520 }, { 132, 520 }, { 133, 520 }, { 134, 520 }, { 135, 520 },
 { 136, 520 }, { 137, 520 }, { 138, 520 }, { 139, 520 }, { 140, 520 },

 { 141, 520 }, { 142, 520 }, { 143, 520 }, { 144, 520 }, { 145, 520 },
 { 146, 520 }, { 147, 520 }, { 148, 520 }, { 149, 520 }, { 150, 520 },
 { 151, 520 }, { 152, 520 }, { 153, 520 }, { 154, 520 }, { 155, 520 },
 { 156, 520 }, { 157, 520 }, { 158, 520 }, { 159, 520 }, { 160, 520 },
 { 161, 520 }, { 162, 520 }, { 163, 520 }, { 164, 520 }, { 165, 520 },
 { 166, 520 }, { 167, 520 }, { 168, 520 }, { 169, 520 }, { 170, 520 },
 { 171, 520 }, { 172, 520 }, { 173, 520 }, { 174, 520 }, { 175, 520 },
 { 176, 520 }, { 177, 520 }, { 178, 520 }, { 179, 520 }, { 180, 520 },
 { 181, 520 }, { 182, 520 }, { 183, 520 }, { 184, 520 }, { 185, 520 },
 { 186, 520 }, { 187, 520 }, { 188, 520 }, { 189, 520 }, { 190, 520 },

 { 191, 520 }, { 192, 520 }, { 193, 520 }, { 194, 520 }, { 195, 520 },
 { 196, 520 }, { 197, 520 }, { 198, 520 }, { 199, 520 }, { 200, 520 },
 { 201, 520 }, { 202, 520 }, { 203, 520 }, { 204, 520 }, { 205, 520 },
 { 206, 520 }, { 207, 520 }, { 208, 520 }, { 209, 520 }, { 210, 520 },
 { 211, 520 }, { 212, 520 }, { 213, 520 }, { 214, 520 }, { 215, 520 },
 { 216, 520 }, { 217, 520 }, { 218, 520 }, { 219, 520 }, { 220, 520 },
 { 221, 520 }, { 222, 520 }, { 223, 520 }, { 224, 520 }, { 225, 520 },
 { 226, 520 }, { 227, 520 }, { 228, 520 }, { 229, 520 }, { 230, 520 },
 { 231, 520 }, { 232, 520 }, { 233, 520 }, { 234, 520 }, { 235, 520 },
 { 236, 520 }, { 237, 520 }, { 238, 520 }, { 239, 520 }, { 240, 520 },

 { 241, 520 }, { 242, 520 }, { 243, 520 }, { 244, 520 }, { 245, 520 },
 { 246, 520 }, { 247, 520 }, { 248, 520 }, { 249, 520 }, { 250, 520 },
 { 251, 520 }, { 252, 520 }, { 253, 520 }, { 254, 520 }, { 255, 520 },
 { 256, 520 }, {   0,   1 }, {   0,1552 }, {   0,   2 }, {   0,1550 },
 {   0,   5 }, {   0,1548 }, {   1, 516 }, {   2, 516 }, {   3, 516 },
 {   4, 516 }, {   5, 516 }, {   6, 516 }, {   7, 516 }, {   8, 516 },
 {   9, 516 }, {  10, 516 }, {  11, 516 }, {  12, 516 }, {  13, 516 },
 {  14, 516 }, {  15, 516 }, {  16, 516 }, {  17, 516 }, {  18, 516 },
 {  19, 516 }, {  20, 516 }, {  21, 516 }, {  22, 516 }, {  23, 516 },
 {  24, 516 }, {  25, 516 }, {  26, 516 }, {  27, 516 }, {  28, 516 },

 {  29, 516 }, {  30, 516 }, {  31, 516 }, {  32, 516 }, {  33, 516 },
 {  34, 516 }, {  35, 516 }, {  36, 516 }, {  37, 516 }, {  38, 516 },
 {  39, 516 }, {  40, 516 }, {  41, 516 }, {  42, 516 }, {  43, 516 },
 {  44, 516 }, {  45, 516 }, {  46, 516 }, {  47, 516 }, {  48, 516 },
 {  49, 516 }, {  50, 516 }, {  51, 516 }, {  52, 516 }, {  53, 516 },
 {  54, 516 }, {  55, 516 }, {  56, 516 }, {  57, 516 }, {  58, 516 },
 {  59, 516 }, {  60, 516 }, {  61, 516 }, {  62, 516 }, {  63, 516 },
 {  64, 516 }, {  65, 516 }, {  66, 516 }, {  67, 516 }, {  68, 516 },
 {  69, 516 }, {  70, 516 }, {  71, 516 }, {  72, 516 }, {  73, 516 },
 {  74, 516 }, {  75, 516 }, {  76, 516 }, {  77, 516 }, {  78, 516 },

 {  79, 516 }, {  80, 516 }, {  81, 516 }, {  82, 516 }, {  83, 516 },
 {  84, 516 }, {  85, 516 }, {  86, 516 }, {  87, 516 }, {  88, 516 },
 {  89, 516 }, {  90, 516 }, {  91, 516 }, {  92, 516 }, {  93, 516 },
 {  94, 516 }, {  95, 516 }, {  96, 516 }, {  97, 516 }, {  98, 516 },
 {  99, 516 }, { 100, 516 }, { 101, 516 }, { 102, 516 }, { 103, 516 },
 { 104, 516 }, { 105, 516 }, { 106, 516 }, { 107, 516 }, { 108, 516 },
 { 109, 516 }, { 110, 516 }, { 111, 516 }, { 112, 516 }, { 113, 516 },
 { 114, 516 }, { 115, 516 }, { 116, 516 }, { 117, 516 }, { 118, 516 },
 { 119, 516 }, { 120, 516 }, { 121, 516 }, { 122, 516 }, { 123, 516 },
 { 124, 516 }, { 125, 516 }, { 126, 516 }, { 127, 516 }, { 128, 516 },

 { 129, 516 }, { 130, 516 }, { 131, 516 }, { 132, 516 }, { 133, 516 },
 { 134, 516 }, { 135, 516 }, { 136, 516 }, { 137, 516 }, { 138, 516 },
 { 139, 516 }, { 140, 516 }, { 141, 516 }, { 142, 516 }, { 143, 516 },
 { 144, 516 }, { 145, 516 }, { 146, 516 }, { 147, 516 }, { 148, 516 },
 { 149, 516 }, { 150, 516 }, { 151, 516 }, { 152, 516 }, { 153, 516 },
 { 154, 516 }, { 155, 516 }, { 156, 516 }, { 157, 516 }, { 158, 516 },
 { 159, 516 }, { 160, 516 }, { 161, 516 }, { 162, 516 }, { 163, 516 },
 { 164, 516 }, { 165, 516 }, { 166, 516 }, { 167, 516 }, { 168, 516 },
 { 169, 516 }, { 170, 516 }, { 171, 516 }, { 172, 516 }, { 173, 516 },
 { 174, 516 }, { 175, 516 }, { 176, 516 }, { 177, 516 }, { 178, 516 },

 { 179, 516 }, { 180, 516 }, { 181, 516 }, { 182, 516 }, { 183, 516 },
 { 184, 516 }, { 185, 516 }, { 186, 516 }, { 187, 516 }, { 188, 516 },
 { 189, 516 }, { 190, 516 }, { 191, 516 }, { 192, 516 }, { 193, 516 },
 { 194, 516 }, { 195, 516 }, { 196, 516 }, { 197, 516 }, { 198, 516 },
 { 199, 516 }, { 200, 516 }, { 201, 516 }, { 202, 516 }, { 203, 516 },
 { 204, 516 }, { 205, 516 }, { 206, 516 }, { 207, 516 }, { 208, 516 },
 { 209, 516 }, { 210, 516 }, { 211, 516 }, { 212, 516 }, { 213, 516 },
 { 214, 516 }, { 215, 516 }, { 216, 516 }, { 217, 516 }, { 218, 516 },
 { 219, 516 }, { 220, 516 }, { 221, 516 }, { 222, 516 }, { 223, 516 },
 { 224, 516 }, { 225, 516 }, { 226, 516 }, { 227, 516 }, { 228, 516 },

 { 229, 516 }, { 230, 516 }, { 231, 516 }, { 232, 516 }, { 233, 516 },
 { 234, 516 }, { 235, 516 }, { 236, 516 }, { 237, 516 }, { 238, 516 },
 { 239, 516 }, { 240, 516 }, { 241, 516 }, { 242, 516 }, { 243, 516 },
 { 244, 516 }, { 245, 516 }, { 246, 516 }, { 247, 516 }, { 248, 516 },
 { 249, 516 }, { 250, 516 }, { 251, 516 }, { 252, 516 }, { 253, 516 },
 { 254, 516 }, { 255, 516 }, { 256, 516 }, {   0,   4 }, {   0,1290 },
 {   1, 516 }, {   2, 516 }, {   3, 516 }, {   4, 516 }, {   5, 516 },
 {   6, 516 }, {   7, 516 }, {   8, 516 }, {   9, 516 }, {  10, 516 },
 {  11, 516 }, {  12, 516 }, {  13, 516 }, {  14, 516 }, {  15, 516 },
 {  16, 516 }, {  17, 516 }, {  18, 516 }, {  19, 516 }, {  20, 516 },

 {  21, 516 }, {  22, 516 }, {  23, 516 }, {  24, 516 }, {  25, 516 },
 {  26, 516 }, {  27, 516 }, {  28, 516 }, {  29, 516 }, {  30, 516 },
 {  31, 516 }, {  32, 516 }, {  33, 516 }, {  34, 516 }, {  35, 516 },
 {  36, 516 }, {  37, 516 }, {  38, 516 }, {  39, 516 }, {  40, 516 },
 {  41, 516 }, {  42, 516 }, {  43, 516 }, {  44, 516 }, {  45, 516 },
 {  46, 516 }, {  47, 516 }, {  48, 516 }, {  49, 516 }, {  50, 516 },
 {  51, 516 }, {  52, 516 }, {  53, 516 }, {  54, 516 }, {  55, 516 },
 {  56, 516 }, {  57, 516 }, {  58, 516 }, {  59, 516 }, {  60, 516 },
 {  61, 516 }, {  62, 516 }, {  63, 516 }, {  64, 516 }, {  65, 516 },
 {  66, 516 }, {  67, 516 }, {  68, 516 }, {  69, 516 }, {  70, 516 },

 {  71, 516 }, {  72, 516 }, {  73, 516 }, {  74, 516 }, {  75, 516 },
 {  76, 516 }, {  77, 516 }, {  78, 516 }, {  79, 516 }, {  80, 516 },
 {  81, 516 }, {  82, 516 }, {  83, 516 }, {  84, 516 }, {  85, 516 },
 {  86, 516 }, {  87, 516 }, {  88, 516 }, {  89, 516 }, {  90, 516 },
 {  91, 516 }, {  92, 516 }, {  93, 516 }, {  94, 516 }, {  95, 516 },
 {  96, 516 }, {  97, 516 }, {  98, 516 }, {  99, 516 }, { 100, 516 },
 { 101, 516 }, { 102, 516 }, { 103, 516 }, { 104, 516 }, { 105, 516 },
 { 106, 516 }, { 107, 516 }, { 108, 516 }, { 109, 516 }, { 110, 516 },
 { 111, 516 }, { 112, 516 }, { 113, 516 }, { 114, 516 }, { 115, 516 },
 { 116, 516 }, { 117, 516 }, { 118, 516 }, { 119, 516 }, { 120, 516 },

 { 121, 516 }, { 122, 516 }, { 123, 516 }, { 124, 516 }, { 125, 516 },
 { 126, 516 }, { 127, 516 }, { 128, 516 }, { 129, 516 }, { 130, 516 },
 { 131, 516 }, { 132, 516 }, { 133, 516 }, { 134, 516 }, { 135, 516 },
 { 136, 516 }, { 137, 516 }, { 138, 516 }, { 139, 516 }, { 140, 516 },
 { 141, 516 }, { 142, 516 }, { 143, 516 }, { 144, 516 }, { 145, 516 },
 { 146, 516 }, { 147, 516 }, { 148, 516 }, { 149, 516 }, { 150, 516 },
 { 151, 516 }, { 152, 516 }, { 153, 516 }, { 154, 516 }, { 155, 516 },
 { 156, 516 }, { 157, 516 }, { 158, 516 }, { 159, 516 }, { 160, 516 },
 { 161, 516 }, { 162, 516 }, { 163, 516 }, { 164, 516 }, { 165, 516 },
 { 166, 516 }, { 167, 516 }, { 168, 516 }, { 169, 516 }, { 170, 516 },

 { 171, 516 }, { 172, 516 }, { 173, 516 }, { 174, 516 }, { 175, 516 },
 { 176, 516 }, { 177, 516 }, { 178, 516 }, { 179, 516 }, { 180, 516 },
 { 181, 516 }, { 182, 516 }, { 183, 516 }, { 184, 516 }, { 185, 516 },
 { 186, 516 }, { 187, 516 }, { 188, 516 }, { 189, 516 }, { 190, 516 },
 { 191, 516 }, { 192, 516 }, { 193, 516 }, { 194, 516 }, { 195, 516 },
 { 196, 516 }, { 197, 516 }, { 198, 516 }, { 199, 516 }, { 200, 516 },
 { 201, 516 }, { 202, 516 }, { 203, 516 }, { 204, 516 }, { 205, 516 },
 { 206, 516 }, { 207, 516 }, { 208, 516 }, { 209, 516 }, { 210, 516 },
 { 211, 516 }, { 212, 516 }, { 213, 516 }, { 214, 516 }, { 215, 516 },
 { 216, 516 }, { 217, 516 }, { 218, 516 }, { 219, 516 }, { 220, 516 },

 { 221, 516 }, { 222, 516 }, { 223, 516 }, { 224, 516 }, { 225, 516 },
 { 226, 516 }, { 227, 516 }, { 228, 516 }, { 229, 516 }, { 230, 516 },
 { 231, 516 }, { 232, 516 }, { 233, 516 }, { 234, 516 }, { 235, 516 },
 { 236, 516 }, { 237, 516 }, { 238, 516 }, { 239, 516 }, { 240, 516 },
 { 241, 516 }, { 242, 516 }, { 243, 516 }, { 244, 516 }, { 245, 516 },
 { 246, 516 }, { 247, 516 }, { 248, 516 }, { 249, 516 }, { 250, 516 },
 { 251, 516 }, { 252, 516 }, { 253, 516 }, { 254, 516 }, { 255, 516 },
 { 256, 516 }, {   0,   0 }, {   0,1032 }, {   1, 516 }, {   2, 516 },
 {   3, 516 }, {   4, 516 }, {   5, 516 }, {   6, 516 }, {   7, 516 },
 {   8, 516 }, {   9, 516 }, {  10, 516 }, {  11, 516 }, {  12, 516 },

 {  13, 516 }, {  14, 516 }, {  15, 516 }, {  16, 516 }, {  17, 516 },
 {  18, 516 }, {  19, 516 }, {  20, 516 }, {  21, 516 }, {  22, 516 },
 {  23, 516 }, {  24, 516 }, {  25, 516 }, {  26, 516 }, {  27, 516 },
 {  28, 516 }, {  29, 516 }, {  30, 516 }, {  31, 516 }, {  32, 516 },
 {  33, 516 }, {  34, 516 }, {  35, 516 }, {  36, 516 }, {  37, 516 },
 {  38, 516 }, {  39, 516 }, {  40, 516 }, {  41, 516 }, {  42, 516 },
 {  43, 516 }, {  44, 516 }, {  45, 516 }, {  46, 516 }, {  47, 516 },
 {  48, 516 }, {  49, 516 }, {  50, 516 }, {  51, 516 }, {  52, 516 },
 {  53, 516 }, {  54, 516 }, {  55, 516 }, {  56, 516 }, {  57, 516 },
 {  58, 516 }, {  59, 516 }, {  60, 516 }, {  61, 516 }, {  62, 516 },

 {  63, 516 }, {  64, 516 }, {  65, 516 }, {  66, 516 }, {  67, 516 },
 {  68, 516 }, {  69, 516 }, {  70, 516 }, {  71, 516 }, {  72, 516 },
 {  73, 516 }, {  74, 516 }, {  75, 516 }, {  76, 516 }, {  77, 516 },
 {  78, 516 }, {  79, 516 }, {  80, 516 }, {  81, 516 }, {  82, 516 },
 {  83, 516 }, {  84, 516 }, {  85, 516 }, {  86, 516 }, {  87, 516 },
 {  88, 516 }, {  89, 516 }, {  90, 516 }, {  91, 516 }, {  92, 516 },
 {  93, 516 }, {  94, 516 }, {  95, 516 }, {  96, 516 }, {  97, 516 },
 {  98, 516 }, {  99, 516 }, { 100, 516 }, { 101, 516 }, { 102, 516 },
 { 103, 516 }, { 104, 516 }, { 105, 516 }, { 106, 516 }, { 107, 516 },
 { 108, 516 }, { 109, 516 }, { 110, 516 }, { 111, 516 }, { 112, 516 },

 { 113, 516 }, { 114, 516 }, { 115, 516 }, { 116, 516 }, { 117, 516 },
 { 118, 516 }, { 119, 516 }, { 120, 516 }, { 121, 516 }, { 122, 516 },
 { 123, 516 }, { 124, 516 }, { 125, 516 }, { 126, 516 }, { 127, 516 },
 { 128, 516 }, { 129, 516 }, { 130, 516 }, { 131, 516 }, { 132, 516 },
 { 133, 516 }, { 134, 516 }, { 135, 516 }, { 136, 516 }, { 137, 516 },
 { 138, 516 }, { 139, 516 }, { 140, 516 }, { 141, 516 }, { 142, 516 },
 { 143, 516 }, { 144, 516 }, { 145, 516 }, { 146, 516 }, { 147, 516 },
 { 148, 516 }, { 149, 516 }, { 150, 516 }, { 151, 516 }, { 152, 516 },
 { 153, 516 }, { 154, 516 }, { 155, 516 }, { 156, 516 }, { 157, 516 },
 { 158, 516 }, { 159, 516 }, { 160, 516 }, { 161, 516 }, { 162, 516 },

 { 163, 516 }, { 164, 516 }, { 165, 516 }, { 166, 516 }, { 167, 516 },
 { 168, 516 }, { 169, 516 }, { 170, 516 }, { 171, 516 }, { 172, 516 },
 { 173, 516 }, { 174, 516 }, { 175, 516 }, { 176, 516 }, { 177, 516 },
 { 178, 516 }, { 179, 516 }, { 180, 516 }, { 181, 516 }, { 182, 516 },
 { 183, 516 }, { 184, 516 }, { 185, 516 }, { 186, 516 }, { 187, 516 },
 { 188, 516 }, { 189, 516 }, { 190, 516 }, { 191, 516 }, { 192, 516 },
 { 193, 516 }, { 194, 516 }, { 195, 516 }, { 196, 516 }, { 197, 516 },
 { 198, 516 }, { 199, 516 }, { 200, 516 }, { 201, 516 }, { 202, 516 },
 { 203, 516 }, { 204, 516 }, { 205, 516 }, { 206, 516 }, { 207, 516 },
 { 208, 516 }, { 209, 516 }, { 210, 516 }, { 211, 516 }, { 212, 516 },

 { 213, 516 }, { 214, 516 }, { 215, 516 }, { 216, 516 }, { 217, 516 },
 { 218, 516 }, { 219, 516 }, { 220, 516 }, { 221, 516 }, { 222, 516 },
 { 223, 516 }, { 224, 516 }, { 225, 516 }, { 226, 516 }, { 227, 516 },
 { 228, 516 }, { 229, 516 }, { 230, 516 }, { 231, 516 }, { 232, 516 },
 { 233, 516 }, { 234, 516 }, { 235, 516 }, { 236, 516 }, { 237, 516 },
 { 238, 516 }, { 239, 516 }, { 240, 516 }, { 241, 516 }, { 242, 516 },
 { 243, 516 }, { 244, 516 }, { 245, 516 }, { 246, 516 }, { 247, 516 },
 { 248, 516 }, { 249, 516 }, { 250, 516 }, { 251, 516 }, { 252, 516 },
 { 253, 516 }, { 254, 516 }, { 255, 516 }, { 256, 516 }, {   0,   4 },
 {   0, 774 }, {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 },

 {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 },
 {  10,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 },
 {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 },
 {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 },
 {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 },
 {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 },
 {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 },
 {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 },
 {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },

 {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 },
 {  60,   0 }, {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 },
 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 },
 {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 },
 {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 },
 {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 },
 {  90,   0 }, {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 },
 {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 },
 { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 },

 { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 },
 { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 },
 { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 },
 { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 },
 { 125,   0 }, { 126,   0 }, { 127,   0 }, { 128,   0 }, { 129,   0 },
 { 130,   0 }, { 131,   0 }, { 132,   0 }, { 133,   0 }, { 134,   0 },
 { 135,   0 }, { 136,   0 }, { 137,   0 }, { 138,   0 }, { 139,   0 },
 { 140,   0 }, { 141,   0 }, { 142,   0 }, { 143,   0 }, { 144,   0 },
 { 145,   0 }, { 146,   0 }, { 147,   0 }, { 148,   0 }, { 149,   0 },
 { 150,   0 }, { 151,   0 }, { 152,   0 }, { 153,   0 }, { 154,   0 },

 { 155,   0 }, { 156,   0 }, { 157,   0 }, { 158,   0 }, { 159,   0 },
 { 160,   0 }, { 161,   0 }, { 162,   0 }, { 163,   0 }, { 164,   0 },
 { 165,   0 }, { 166,   0 }, { 167,   0 }, { 168,   0 }, { 169,   0 },
 { 170,   0 }, { 171,   0 }, { 172,   0 }, { 173,   0 }, { 174,   0 },
 { 175,   0 }, { 176,   0 }, { 177,   0 }, { 178,   0 }, { 179,   0 },
 { 180,   0 }, { 181,   0 }, { 182,   0 }, { 183,   0 }, { 184,   0 },
 { 185,   0 }, { 186,   0 }, { 187,   0 }, { 188,   0 }, { 189,   0 },
 { 190,   0 }, { 191,   0 }, { 192,   0 }, { 193,   0 }, { 194,   0 },
 { 195,   0 }, { 196,   0 }, { 197,   0 }, { 198,   0 }, { 199,   0 },
 { 200,   0 }, { 201,   0 }, { 202,   0 }, { 203,   0 }, { 204,   0 },

 { 205,   0 }, { 206,   0 }, { 207,   0 }, { 208,   0 }, { 209,   0 },
 { 210,   0 }, { 211,   0 }, { 212,   0 }, { 213,   0 }, { 214,   0 },
 { 215,   0 }, { 216,   0 }, { 217,   0 }, { 218,   0 }, { 219,   0 },
 { 220,   0 }, { 221,   0 }, { 222,   0 }, { 223,   0 }, { 224,   0 },
 { 225,   0 }, { 226,   0 }, { 227,   0 }, { 228,   0 }, { 229,   0 },
 { 230,   0 }, { 231,   0 }, { 232,   0 }, { 233,   0 }, { 234,   0 },
 { 235,   0 }, { 236,   0 }, { 237,   0 }, { 238,   0 }, { 239,   0 },
 { 240,   0 }, { 241,   0 }, { 242,   0 }, { 243,   0 }, { 244,   0 },
 { 245,   0 }, { 246,   0 }, { 247,   0 }, { 248,   0 }, { 249,   0 },
 { 250,   0 }, { 251,   0 }, { 252,   0 }, { 253,   0 }, { 254,   0 },

 { 255,   0 }, { 256,   0 }, {   0,   0 }, {   0, 516 }, {   1, 258 },
 {   2, 258 }, {   3, 258 }, {   4, 258 }, {   5, 258 }, {   6, 258 },
 {   7, 258 }, {   8, 258 }, {   9, 258 }, {  10, 258 }, {  11, 258 },
 {  12, 258 }, {  13, 258 }, {  14, 258 }, {  15, 258 }, {  16, 258 },
 {  17, 258 }, {  18, 258 }, {  19, 258 }, {  20, 258 }, {  21, 258 },
 {  22, 258 }, {  23, 258 }, {  24, 258 }, {  25, 258 }, {  26, 258 },
 {  27, 258 }, {  28, 258 }, {  29, 258 }, {  30, 258 }, {  31, 258 },
 {  32, 258 }, {  33, 258 }, {  34, 258 }, {  35, 258 }, {  36, 258 },
 {  37, 258 }, {  38, 258 }, {  39, 258 }, {  40, 258 }, {  41, 258 },
 {  42, 258 }, {  43, 258 }, {  44, 258 }, {  45, 258 }, {  46, 258 },

 {  47, 258 }, {  48, 258 }, {  49, 258 }, {  50, 258 }, {  51, 258 },
 {  52, 258 }, {  53, 258 }, {  54, 258 }, {  55, 258 }, {  56, 258 },
 {  57, 258 }, {  58, 258 }, {  59, 258 }, {  60, 258 }, {  61, 258 },
 {  62, 258 }, {  63, 258 }, {  64, 258 }, {  65, 258 }, {  66, 258 },
 {  67, 258 }, {  68, 258 }, {  69, 258 }, {  70, 258 }, {  71, 258 },
 {  72, 258 }, {  73, 258 }, {  74, 258 }, {  75, 258 }, {  76, 258 },
 {  77, 258 }, {  78, 258 }, {  79, 258 }, {  80, 258 }, {  81, 258 },
 {  82, 258 }, {  83, 258 }, {  84, 258 }, {  85, 258 }, {  86, 258 },
 {  87, 258 }, {  88, 258 }, {  89, 258 }, {  90, 258 }, {  91, 258 },
 {  92, 258 }, {  93, 258 }, {  94, 258 }, {  95, 258 }, {  96, 258 },

 {  97, 258 }, {  98, 258 }, {  99, 258 }, { 100, 258 }, { 101, 258 },
 { 102, 258 }, { 103, 258 }, { 104, 258 }, { 105, 258 }, { 106, 258 },
 { 107, 258 }, { 108, 258 }, { 109, 258 }, { 110, 258 }, { 111, 258 },
 { 112, 258 }, { 113, 258 }, { 114, 258 }, { 115, 258 }, { 116, 258 },
 { 117, 258 }, { 118, 258 }, { 119, 258 }, { 120, 258 }, { 121, 258 },
 { 122, 258 }, { 123, 258 }, { 124, 258 }, { 125, 258 }, { 126, 258 },
 { 127, 258 }, { 128, 258 }, { 129, 258 }, { 130, 258 }, { 131, 258 },
 { 132, 258 }, { 133, 258 }, { 134, 258 }, { 135, 258 }, { 136, 258 },
 { 137, 258 }, { 138, 258 }, { 139, 258 }, { 140, 258 }, { 141, 258 },
 { 142, 258 }, { 143, 258 }, { 144, 258 }, { 145, 258 }, { 146, 258 },

 { 147, 258 }, { 148, 258 }, { 149, 258 }, { 150, 258 }, { 151, 258 },
 { 152, 258 }, { 153, 258 }, { 154, 258 }, { 155, 258 }, { 156, 258 },
 { 157, 258 }, { 158, 258 }, { 159, 258 }, { 160, 258 }, { 161, 258 },
 { 162, 258 }, { 163, 258 }, { 164, 258 }, { 165, 258 }, { 166, 258 },
 { 167, 258 }, { 168, 258 }, { 169, 258 }, { 170, 258 }, { 171, 258 },
 { 172, 258 }, { 173, 258 }, { 174, 258 }, { 175, 258 }, { 176, 258 },
 { 177, 258 }, { 178, 258 }, { 179, 258 }, { 180, 258 }, { 181, 258 },
 { 182, 258 }, { 183, 258 }, { 184, 258 }, { 185, 258 }, { 186, 258 },
 { 187, 258 }, { 188, 258 }, { 189, 258 }, { 190, 258 }, { 191, 258 },
 { 192, 258 }, { 193, 258 }, { 194, 258 }, { 195, 258 }, { 196, 258 },

 { 197, 258 }, { 198, 258 }, { 199, 258 }, { 200, 258 }, { 201, 258 },
 { 202, 258 }, { 203, 258 }, { 204, 258 }, { 205, 258 }, { 206, 258 },
 { 207, 258 }, { 208, 258 }, { 209, 258 }, { 210, 258 }, { 211, 258 },
 { 212, 258 }, { 213, 258 }, { 214, 258 }, { 215, 258 }, { 216, 258 },
 { 217, 258 }, { 218, 258 }, { 219, 258 }, { 220, 258 }, { 221, 258 },
 { 222, 258 }, { 223, 258 }, { 224, 258 }, { 225, 258 }, { 226, 258 },
 { 227, 258 }, { 228, 258 }, { 229, 258 }, { 230, 258 }, { 231, 258 },
 { 232, 258 }, { 233, 258 }, { 234, 258 }, { 235, 258 }, { 236, 258 },
 { 237, 258 }, { 238, 258 }, { 239, 258 }, { 240, 258 }, { 241, 258 },
 { 242, 258 }, { 243, 258 }, { 244, 258 }, { 245, 258 }, { 246, 258 },

 { 247, 258 }, { 248, 258 }, { 249, 258 }, { 250, 258 }, { 251, 258 },
 { 252, 258 }, { 253, 258 }, { 254, 258 }, { 255, 258 }, { 256, 258 },
 {   0,   3 }, {   0, 258 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 257,   7 }, {   1,   0 },
    };

static const struct yy_trans_info *yy_start_state_list[9] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[261],
    &yy_transition[519],
    &yy_transition[777],
    &yy_transition[1035],
    &yy_transition[1293],
    &yy_transition[1551],
    &yy_transition[1809],
    } ;

static const flex_int32_t yy_rule_linenum[6] =
    {   0,
       45,   50,   56,   62,   73
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#undef YYTOKENTYPE
#include "test_i_av_stream_parser.h"
#include "test_i_av_stream_parser_driver.h"

/* *NOTE*: instead of the default (int), this yylex returns token_type.
           Unfortunately, yyterminate by default returns 0, which is not of
           token_type. This %define solves that issue. */
#define yyterminate() return END
/* *TODO*: find out why 'read' does not compile (on Linux, flex 2.5.39) */
/* %option c++ yyclass="AVStream_Scanner" stack noline bison-bridge */
/*         bison-locations */
/* *IMPORTANT NOTE*: flex 2.5.4 does not recognize 'reentrant, nounistd, */
/*                   ansi-definitions, ansi-prototypes, header-file' */
#define YY_NO_UNISTD_H 1
/* *IMPORTANT NOTE*: 'yylineno' is not compatible with 'read' */

//#define YY_USER_ACTION yylloc->columns(yyleng);

#define INITIAL 0
#define header 1
#define length 2
#define body 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#define YY_EXTRA_TYPE AVStream_ParserDriver*

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals ( yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
/* %% [7.0] user's declarations go here */

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yy_start_state_list[yyg->yy_start];
yy_match:
		{
		const struct yy_trans_info *yy_trans_info;

		YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			}
		}

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 6 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 6 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 7 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos + 1;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
{ BEGIN(header);
                             yyless(0);
                           }
	YY_BREAK
// end <INITIAL>

case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
{ //yylloc->step();
                             BEGIN(length);
                             yylval->ival = static_cast<ACE_UINT32> (yytext[0]);
                             return TYPE; }
	YY_BREAK
// end <header>

case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
{ //yylloc->step();
                             BEGIN(body);
                             yylval->ival = *reinterpret_cast<ACE_UINT32*> (yytext);
                             return LENGTH; }
	YY_BREAK
// end <length>

case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
{ //yylloc->step();
                             yylval->ival = yyleng;
                             if (static_cast<ACE_UINT32> (yyleng) < driver->missing_)
                               return DATA;
                             yylval->ival = driver->missing_;
                             if (likely ((static_cast<ACE_UINT32> (yyleng) - driver->missing_) > 0))
                               yyless (driver->missing_);
                             BEGIN(header);
                             return BODY; }
	YY_BREAK
// end <body>
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(header):
case YY_STATE_EOF(length):
case YY_STATE_EOF(body):
{ yyterminate(); }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
{ /* *TODO*: use (?s:.) ? */
                             //yylloc->step();

                             // debug info
                             std::string error_message = ACE_TEXT("invalid character: \"");
                             error_message += yytext[0];
                             error_message += ACE_TEXT("\", aborting");
                             driver->error(*yylloc, error_message);

                             yyterminate(); }
	YY_BREAK
case 6:
YY_RULE_SETUP
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yy_start_state_list[yyg->yy_start];

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 256)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = yyg->yy_c_buf_p;

	int yy_c = 256;
	const struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* %endif */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#ifdef __cplusplus
extern "C"
{
#endif /* __cplusplus */
int
AVStream_Scanner_wrap (yyscan_t yyscanner)
{
  NETWORK_TRACE (ACE_TEXT ("::AVStream_Scanner_wrap"));

  // sanity check(s)
  ACE_ASSERT (yyscanner);
  AVStream_ParserDriver* driver = AVStream_Scanner_get_extra (yyscanner);
  ACE_ASSERT (driver);

  if (!driver->switchBuffer())
  {
    ACE_DEBUG ((LM_ERROR,
                ACE_TEXT ("failed to AVStream_ParserDriver::switchBuffer(), aborting\n")));
    return 1;
  } // end IF

  return 0;
}
#ifdef __cplusplus
}
#endif /* __cplusplus */

