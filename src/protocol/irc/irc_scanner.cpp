
#define  YY_INT_ALIGNED long int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 1
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE IRC_Scanner_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via IRC_Scanner_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

void IRC_Scanner_restart (FILE *input_file ,yyscan_t yyscanner );
void IRC_Scanner__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE IRC_Scanner__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void IRC_Scanner__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void IRC_Scanner__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void IRC_Scanner_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void IRC_Scanner_pop_buffer_state (yyscan_t yyscanner );

static void IRC_Scanner_ensure_buffer_stack (yyscan_t yyscanner );
static void IRC_Scanner__load_buffer_state (yyscan_t yyscanner );
static void IRC_Scanner__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER IRC_Scanner__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE IRC_Scanner__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE IRC_Scanner__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE IRC_Scanner__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

/* %endif */

void *IRC_Scanner_alloc (yy_size_t ,yyscan_t yyscanner );
void *IRC_Scanner_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void IRC_Scanner_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer IRC_Scanner__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        IRC_Scanner_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            IRC_Scanner__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        IRC_Scanner_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            IRC_Scanner__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define IRC_Scanner_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

typedef yyconst struct yy_trans_info *yy_state_type;

#define yytext_ptr yytext_r

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yynoreturn yy_fatal_error (yyconst char* msg ,yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 23
#define YY_END_OF_BUFFER 24
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[6938] =
    {
 {   0,   0 }, {   0,6682 }, {   0,   0 }, {   0,6680 }, {   1,4128 },
 {   2,4128 }, {   3,4128 }, {   4,4128 }, {   5,4128 }, {   6,4128 },
 {   7,4128 }, {   8,4128 }, {   9,4128 }, {  10,4128 }, {  11,4128 },
 {  12,4128 }, {  13,4130 }, {  14,4128 }, {  15,4128 }, {  16,4128 },
 {  17,4128 }, {  18,4128 }, {  19,4128 }, {  20,4128 }, {  21,4128 },
 {  22,4128 }, {  23,4128 }, {  24,4128 }, {  25,4128 }, {  26,4128 },
 {  27,4128 }, {  28,4128 }, {  29,4128 }, {  30,4128 }, {  31,4128 },
 {  32,4132 }, {  33,4128 }, {  34,4128 }, {  35,4128 }, {  36,4128 },
 {  37,4128 }, {  38,4128 }, {  39,4128 }, {  40,4128 }, {  41,4128 },
 {  42,4128 }, {  43,4128 }, {  44,4128 }, {  45,4128 }, {  46,4128 },

 {  47,4128 }, {  48,4134 }, {  49,4134 }, {  50,4134 }, {  51,4134 },
 {  52,4134 }, {  53,4134 }, {  54,4134 }, {  55,4134 }, {  56,4134 },
 {  57,4134 }, {  58,4136 }, {  59,4128 }, {  60,4128 }, {  61,4128 },
 {  62,4128 }, {  63,4128 }, {  64,4128 }, {  65,4138 }, {  66,4138 },
 {  67,4138 }, {  68,4138 }, {  69,4138 }, {  70,4138 }, {  71,4138 },
 {  72,4138 }, {  73,4138 }, {  74,4138 }, {  75,4138 }, {  76,4138 },
 {  77,4138 }, {  78,4138 }, {  79,4138 }, {  80,4138 }, {  81,4138 },
 {  82,4138 }, {  83,4138 }, {  84,4138 }, {  85,4138 }, {  86,4138 },
 {  87,4138 }, {  88,4138 }, {  89,4138 }, {  90,4138 }, {  91,4128 },
 {  92,4128 }, {  93,4128 }, {  94,4128 }, {  95,4128 }, {  96,4128 },

 {  97,4138 }, {  98,4138 }, {  99,4138 }, { 100,4138 }, { 101,4138 },
 { 102,4138 }, { 103,4138 }, { 104,4138 }, { 105,4138 }, { 106,4138 },
 { 107,4138 }, { 108,4138 }, { 109,4138 }, { 110,4138 }, { 111,4138 },
 { 112,4138 }, { 113,4138 }, { 114,4138 }, { 115,4138 }, { 116,4138 },
 { 117,4138 }, { 118,4138 }, { 119,4138 }, { 120,4138 }, { 121,4138 },
 { 122,4138 }, { 123,4128 }, { 124,4128 }, { 125,4128 }, { 126,4128 },
 { 127,4128 }, { 128,4128 }, { 129,4128 }, { 130,4128 }, { 131,4128 },
 { 132,4128 }, { 133,4128 }, { 134,4128 }, { 135,4128 }, { 136,4128 },
 { 137,4128 }, { 138,4128 }, { 139,4128 }, { 140,4128 }, { 141,4128 },
 { 142,4128 }, { 143,4128 }, { 144,4128 }, { 145,4128 }, { 146,4128 },

 { 147,4128 }, { 148,4128 }, { 149,4128 }, { 150,4128 }, { 151,4128 },
 { 152,4128 }, { 153,4128 }, { 154,4128 }, { 155,4128 }, { 156,4128 },
 { 157,4128 }, { 158,4128 }, { 159,4128 }, { 160,4128 }, { 161,4128 },
 { 162,4128 }, { 163,4128 }, { 164,4128 }, { 165,4128 }, { 166,4128 },
 { 167,4128 }, { 168,4128 }, { 169,4128 }, { 170,4128 }, { 171,4128 },
 { 172,4128 }, { 173,4128 }, { 174,4128 }, { 175,4128 }, { 176,4128 },
 { 177,4128 }, { 178,4128 }, { 179,4128 }, { 180,4128 }, { 181,4128 },
 { 182,4128 }, { 183,4128 }, { 184,4128 }, { 185,4128 }, { 186,4128 },
 { 187,4128 }, { 188,4128 }, { 189,4128 }, { 190,4128 }, { 191,4128 },
 { 192,4128 }, { 193,4128 }, { 194,4128 }, { 195,4128 }, { 196,4128 },

 { 197,4128 }, { 198,4128 }, { 199,4128 }, { 200,4128 }, { 201,4128 },
 { 202,4128 }, { 203,4128 }, { 204,4128 }, { 205,4128 }, { 206,4128 },
 { 207,4128 }, { 208,4128 }, { 209,4128 }, { 210,4128 }, { 211,4128 },
 { 212,4128 }, { 213,4128 }, { 214,4128 }, { 215,4128 }, { 216,4128 },
 { 217,4128 }, { 218,4128 }, { 219,4128 }, { 220,4128 }, { 221,4128 },
 { 222,4128 }, { 223,4128 }, { 224,4128 }, { 225,4128 }, { 226,4128 },
 { 227,4128 }, { 228,4128 }, { 229,4128 }, { 230,4128 }, { 231,4128 },
 { 232,4128 }, { 233,4128 }, { 234,4128 }, { 235,4128 }, { 236,4128 },
 { 237,4128 }, { 238,4128 }, { 239,4128 }, { 240,4128 }, { 241,4128 },
 { 242,4128 }, { 243,4128 }, { 244,4128 }, { 245,4128 }, { 246,4128 },

 { 247,4128 }, { 248,4128 }, { 249,4128 }, { 250,4128 }, { 251,4128 },
 { 252,4128 }, { 253,4128 }, { 254,4128 }, { 255,4128 }, { 256,4128 },
 {   0,   0 }, {   0,6422 }, {   1,3870 }, {   2,3870 }, {   3,3870 },
 {   4,3870 }, {   5,3870 }, {   6,3870 }, {   7,3870 }, {   8,3870 },
 {   9,3870 }, {  10,3870 }, {  11,3870 }, {  12,3870 }, {  13,3872 },
 {  14,3870 }, {  15,3870 }, {  16,3870 }, {  17,3870 }, {  18,3870 },
 {  19,3870 }, {  20,3870 }, {  21,3870 }, {  22,3870 }, {  23,3870 },
 {  24,3870 }, {  25,3870 }, {  26,3870 }, {  27,3870 }, {  28,3870 },
 {  29,3870 }, {  30,3870 }, {  31,3870 }, {  32,3874 }, {  33,3870 },
 {  34,3870 }, {  35,3870 }, {  36,3870 }, {  37,3870 }, {  38,3870 },

 {  39,3870 }, {  40,3870 }, {  41,3870 }, {  42,3870 }, {  43,3870 },
 {  44,3870 }, {  45,3870 }, {  46,3870 }, {  47,3870 }, {  48,3876 },
 {  49,3876 }, {  50,3876 }, {  51,3876 }, {  52,3876 }, {  53,3876 },
 {  54,3876 }, {  55,3876 }, {  56,3876 }, {  57,3876 }, {  58,3878 },
 {  59,3870 }, {  60,3870 }, {  61,3870 }, {  62,3870 }, {  63,3870 },
 {  64,3870 }, {  65,3880 }, {  66,3880 }, {  67,3880 }, {  68,3880 },
 {  69,3880 }, {  70,3880 }, {  71,3880 }, {  72,3880 }, {  73,3880 },
 {  74,3880 }, {  75,3880 }, {  76,3880 }, {  77,3880 }, {  78,3880 },
 {  79,3880 }, {  80,3880 }, {  81,3880 }, {  82,3880 }, {  83,3880 },
 {  84,3880 }, {  85,3880 }, {  86,3880 }, {  87,3880 }, {  88,3880 },

 {  89,3880 }, {  90,3880 }, {  91,3870 }, {  92,3870 }, {  93,3870 },
 {  94,3870 }, {  95,3870 }, {  96,3870 }, {  97,3880 }, {  98,3880 },
 {  99,3880 }, { 100,3880 }, { 101,3880 }, { 102,3880 }, { 103,3880 },
 { 104,3880 }, { 105,3880 }, { 106,3880 }, { 107,3880 }, { 108,3880 },
 { 109,3880 }, { 110,3880 }, { 111,3880 }, { 112,3880 }, { 113,3880 },
 { 114,3880 }, { 115,3880 }, { 116,3880 }, { 117,3880 }, { 118,3880 },
 { 119,3880 }, { 120,3880 }, { 121,3880 }, { 122,3880 }, { 123,3870 },
 { 124,3870 }, { 125,3870 }, { 126,3870 }, { 127,3870 }, { 128,3870 },
 { 129,3870 }, { 130,3870 }, { 131,3870 }, { 132,3870 }, { 133,3870 },
 { 134,3870 }, { 135,3870 }, { 136,3870 }, { 137,3870 }, { 138,3870 },

 { 139,3870 }, { 140,3870 }, { 141,3870 }, { 142,3870 }, { 143,3870 },
 { 144,3870 }, { 145,3870 }, { 146,3870 }, { 147,3870 }, { 148,3870 },
 { 149,3870 }, { 150,3870 }, { 151,3870 }, { 152,3870 }, { 153,3870 },
 { 154,3870 }, { 155,3870 }, { 156,3870 }, { 157,3870 }, { 158,3870 },
 { 159,3870 }, { 160,3870 }, { 161,3870 }, { 162,3870 }, { 163,3870 },
 { 164,3870 }, { 165,3870 }, { 166,3870 }, { 167,3870 }, { 168,3870 },
 { 169,3870 }, { 170,3870 }, { 171,3870 }, { 172,3870 }, { 173,3870 },
 { 174,3870 }, { 175,3870 }, { 176,3870 }, { 177,3870 }, { 178,3870 },
 { 179,3870 }, { 180,3870 }, { 181,3870 }, { 182,3870 }, { 183,3870 },
 { 184,3870 }, { 185,3870 }, { 186,3870 }, { 187,3870 }, { 188,3870 },

 { 189,3870 }, { 190,3870 }, { 191,3870 }, { 192,3870 }, { 193,3870 },
 { 194,3870 }, { 195,3870 }, { 196,3870 }, { 197,3870 }, { 198,3870 },
 { 199,3870 }, { 200,3870 }, { 201,3870 }, { 202,3870 }, { 203,3870 },
 { 204,3870 }, { 205,3870 }, { 206,3870 }, { 207,3870 }, { 208,3870 },
 { 209,3870 }, { 210,3870 }, { 211,3870 }, { 212,3870 }, { 213,3870 },
 { 214,3870 }, { 215,3870 }, { 216,3870 }, { 217,3870 }, { 218,3870 },
 { 219,3870 }, { 220,3870 }, { 221,3870 }, { 222,3870 }, { 223,3870 },
 { 224,3870 }, { 225,3870 }, { 226,3870 }, { 227,3870 }, { 228,3870 },
 { 229,3870 }, { 230,3870 }, { 231,3870 }, { 232,3870 }, { 233,3870 },
 { 234,3870 }, { 235,3870 }, { 236,3870 }, { 237,3870 }, { 238,3870 },

 { 239,3870 }, { 240,3870 }, { 241,3870 }, { 242,3870 }, { 243,3870 },
 { 244,3870 }, { 245,3870 }, { 246,3870 }, { 247,3870 }, { 248,3870 },
 { 249,3870 }, { 250,3870 }, { 251,3870 }, { 252,3870 }, { 253,3870 },
 { 254,3870 }, { 255,3870 }, { 256,3870 }, {   0,   0 }, {   0,6164 },
 {   1,3612 }, {   2,3612 }, {   3,3612 }, {   4,3612 }, {   5,3612 },
 {   6,3612 }, {   7,3612 }, {   8,3612 }, {   9,3612 }, {  10,3612 },
 {  11,3612 }, {  12,3612 }, {  13,3612 }, {  14,3612 }, {  15,3612 },
 {  16,3612 }, {  17,3612 }, {  18,3612 }, {  19,3612 }, {  20,3612 },
 {  21,3612 }, {  22,3612 }, {  23,3612 }, {  24,3612 }, {  25,3612 },
 {  26,3612 }, {  27,3612 }, {  28,3612 }, {  29,3612 }, {  30,3612 },

 {  31,3612 }, {  32,3624 }, {  33,3626 }, {  34,3612 }, {  35,3612 },
 {  36,3612 }, {  37,3612 }, {  38,3612 }, {  39,3612 }, {  40,3612 },
 {  41,3612 }, {  42,3612 }, {  43,3612 }, {  44,3612 }, {  45,3714 },
 {  46,3714 }, {  47,3612 }, {  48,3714 }, {  49,3714 }, {  50,3714 },
 {  51,3714 }, {  52,3714 }, {  53,3714 }, {  54,3714 }, {  55,3714 },
 {  56,3714 }, {  57,3714 }, {  58,3612 }, {  59,3612 }, {  60,3612 },
 {  61,3612 }, {  62,3612 }, {  63,3612 }, {  64,3628 }, {  65,3806 },
 {  66,3806 }, {  67,3806 }, {  68,3806 }, {  69,3806 }, {  70,3806 },
 {  71,3806 }, {  72,3806 }, {  73,3806 }, {  74,3806 }, {  75,3806 },
 {  76,3806 }, {  77,3806 }, {  78,3806 }, {  79,3806 }, {  80,3806 },

 {  81,3806 }, {  82,3806 }, {  83,3806 }, {  84,3806 }, {  85,3806 },
 {  86,3806 }, {  87,3806 }, {  88,3806 }, {  89,3806 }, {  90,3806 },
 {  91,3612 }, {  92,3612 }, {  93,3612 }, {  94,3612 }, {  95,3612 },
 {  96,3612 }, {  97,3806 }, {  98,3806 }, {  99,3806 }, { 100,3806 },
 { 101,3806 }, { 102,3806 }, { 103,3806 }, { 104,3806 }, { 105,3806 },
 { 106,3806 }, { 107,3806 }, { 108,3806 }, { 109,3806 }, { 110,3806 },
 { 111,3806 }, { 112,3806 }, { 113,3806 }, { 114,3806 }, { 115,3806 },
 { 116,3806 }, { 117,3806 }, { 118,3806 }, { 119,3806 }, { 120,3806 },
 { 121,3806 }, { 122,3806 }, { 123,3612 }, { 124,3612 }, { 125,3612 },
 { 126,3612 }, { 127,3612 }, { 128,3612 }, { 129,3612 }, { 130,3612 },

 { 131,3612 }, { 132,3612 }, { 133,3612 }, { 134,3612 }, { 135,3612 },
 { 136,3612 }, { 137,3612 }, { 138,3612 }, { 139,3612 }, { 140,3612 },
 { 141,3612 }, { 142,3612 }, { 143,3612 }, { 144,3612 }, { 145,3612 },
 { 146,3612 }, { 147,3612 }, { 148,3612 }, { 149,3612 }, { 150,3612 },
 { 151,3612 }, { 152,3612 }, { 153,3612 }, { 154,3612 }, { 155,3612 },
 { 156,3612 }, { 157,3612 }, { 158,3612 }, { 159,3612 }, { 160,3612 },
 { 161,3612 }, { 162,3612 }, { 163,3612 }, { 164,3612 }, { 165,3612 },
 { 166,3612 }, { 167,3612 }, { 168,3612 }, { 169,3612 }, { 170,3612 },
 { 171,3612 }, { 172,3612 }, { 173,3612 }, { 174,3612 }, { 175,3612 },
 { 176,3612 }, { 177,3612 }, { 178,3612 }, { 179,3612 }, { 180,3612 },

 { 181,3612 }, { 182,3612 }, { 183,3612 }, { 184,3612 }, { 185,3612 },
 { 186,3612 }, { 187,3612 }, { 188,3612 }, { 189,3612 }, { 190,3612 },
 { 191,3612 }, { 192,3612 }, { 193,3612 }, { 194,3612 }, { 195,3612 },
 { 196,3612 }, { 197,3612 }, { 198,3612 }, { 199,3612 }, { 200,3612 },
 { 201,3612 }, { 202,3612 }, { 203,3612 }, { 204,3612 }, { 205,3612 },
 { 206,3612 }, { 207,3612 }, { 208,3612 }, { 209,3612 }, { 210,3612 },
 { 211,3612 }, { 212,3612 }, { 213,3612 }, { 214,3612 }, { 215,3612 },
 { 216,3612 }, { 217,3612 }, { 218,3612 }, { 219,3612 }, { 220,3612 },
 { 221,3612 }, { 222,3612 }, { 223,3612 }, { 224,3612 }, { 225,3612 },
 { 226,3612 }, { 227,3612 }, { 228,3612 }, { 229,3612 }, { 230,3612 },

 { 231,3612 }, { 232,3612 }, { 233,3612 }, { 234,3612 }, { 235,3612 },
 { 236,3612 }, { 237,3612 }, { 238,3612 }, { 239,3612 }, { 240,3612 },
 { 241,3612 }, { 242,3612 }, { 243,3612 }, { 244,3612 }, { 245,3612 },
 { 246,3612 }, { 247,3612 }, { 248,3612 }, { 249,3612 }, { 250,3612 },
 { 251,3612 }, { 252,3612 }, { 253,3612 }, { 254,3612 }, { 255,3612 },
 { 256,3612 }, {   0,   0 }, {   0,5906 }, {   1,3354 }, {   2,3354 },
 {   3,3354 }, {   4,3354 }, {   5,3354 }, {   6,3354 }, {   7,3354 },
 {   8,3354 }, {   9,3354 }, {  10,3354 }, {  11,3354 }, {  12,3354 },
 {  13,3354 }, {  14,3354 }, {  15,3354 }, {  16,3354 }, {  17,3354 },
 {  18,3354 }, {  19,3354 }, {  20,3354 }, {  21,3354 }, {  22,3354 },

 {  23,3354 }, {  24,3354 }, {  25,3354 }, {  26,3354 }, {  27,3354 },
 {  28,3354 }, {  29,3354 }, {  30,3354 }, {  31,3354 }, {  32,3366 },
 {  33,3368 }, {  34,3354 }, {  35,3354 }, {  36,3354 }, {  37,3354 },
 {  38,3354 }, {  39,3354 }, {  40,3354 }, {  41,3354 }, {  42,3354 },
 {  43,3354 }, {  44,3354 }, {  45,3456 }, {  46,3456 }, {  47,3354 },
 {  48,3456 }, {  49,3456 }, {  50,3456 }, {  51,3456 }, {  52,3456 },
 {  53,3456 }, {  54,3456 }, {  55,3456 }, {  56,3456 }, {  57,3456 },
 {  58,3354 }, {  59,3354 }, {  60,3354 }, {  61,3354 }, {  62,3354 },
 {  63,3354 }, {  64,3370 }, {  65,3548 }, {  66,3548 }, {  67,3548 },
 {  68,3548 }, {  69,3548 }, {  70,3548 }, {  71,3548 }, {  72,3548 },

 {  73,3548 }, {  74,3548 }, {  75,3548 }, {  76,3548 }, {  77,3548 },
 {  78,3548 }, {  79,3548 }, {  80,3548 }, {  81,3548 }, {  82,3548 },
 {  83,3548 }, {  84,3548 }, {  85,3548 }, {  86,3548 }, {  87,3548 },
 {  88,3548 }, {  89,3548 }, {  90,3548 }, {  91,3354 }, {  92,3354 },
 {  93,3354 }, {  94,3354 }, {  95,3354 }, {  96,3354 }, {  97,3548 },
 {  98,3548 }, {  99,3548 }, { 100,3548 }, { 101,3548 }, { 102,3548 },
 { 103,3548 }, { 104,3548 }, { 105,3548 }, { 106,3548 }, { 107,3548 },
 { 108,3548 }, { 109,3548 }, { 110,3548 }, { 111,3548 }, { 112,3548 },
 { 113,3548 }, { 114,3548 }, { 115,3548 }, { 116,3548 }, { 117,3548 },
 { 118,3548 }, { 119,3548 }, { 120,3548 }, { 121,3548 }, { 122,3548 },

 { 123,3354 }, { 124,3354 }, { 125,3354 }, { 126,3354 }, { 127,3354 },
 { 128,3354 }, { 129,3354 }, { 130,3354 }, { 131,3354 }, { 132,3354 },
 { 133,3354 }, { 134,3354 }, { 135,3354 }, { 136,3354 }, { 137,3354 },
 { 138,3354 }, { 139,3354 }, { 140,3354 }, { 141,3354 }, { 142,3354 },
 { 143,3354 }, { 144,3354 }, { 145,3354 }, { 146,3354 }, { 147,3354 },
 { 148,3354 }, { 149,3354 }, { 150,3354 }, { 151,3354 }, { 152,3354 },
 { 153,3354 }, { 154,3354 }, { 155,3354 }, { 156,3354 }, { 157,3354 },
 { 158,3354 }, { 159,3354 }, { 160,3354 }, { 161,3354 }, { 162,3354 },
 { 163,3354 }, { 164,3354 }, { 165,3354 }, { 166,3354 }, { 167,3354 },
 { 168,3354 }, { 169,3354 }, { 170,3354 }, { 171,3354 }, { 172,3354 },

 { 173,3354 }, { 174,3354 }, { 175,3354 }, { 176,3354 }, { 177,3354 },
 { 178,3354 }, { 179,3354 }, { 180,3354 }, { 181,3354 }, { 182,3354 },
 { 183,3354 }, { 184,3354 }, { 185,3354 }, { 186,3354 }, { 187,3354 },
 { 188,3354 }, { 189,3354 }, { 190,3354 }, { 191,3354 }, { 192,3354 },
 { 193,3354 }, { 194,3354 }, { 195,3354 }, { 196,3354 }, { 197,3354 },
 { 198,3354 }, { 199,3354 }, { 200,3354 }, { 201,3354 }, { 202,3354 },
 { 203,3354 }, { 204,3354 }, { 205,3354 }, { 206,3354 }, { 207,3354 },
 { 208,3354 }, { 209,3354 }, { 210,3354 }, { 211,3354 }, { 212,3354 },
 { 213,3354 }, { 214,3354 }, { 215,3354 }, { 216,3354 }, { 217,3354 },
 { 218,3354 }, { 219,3354 }, { 220,3354 }, { 221,3354 }, { 222,3354 },

 { 223,3354 }, { 224,3354 }, { 225,3354 }, { 226,3354 }, { 227,3354 },
 { 228,3354 }, { 229,3354 }, { 230,3354 }, { 231,3354 }, { 232,3354 },
 { 233,3354 }, { 234,3354 }, { 235,3354 }, { 236,3354 }, { 237,3354 },
 { 238,3354 }, { 239,3354 }, { 240,3354 }, { 241,3354 }, { 242,3354 },
 { 243,3354 }, { 244,3354 }, { 245,3354 }, { 246,3354 }, { 247,3354 },
 { 248,3354 }, { 249,3354 }, { 250,3354 }, { 251,3354 }, { 252,3354 },
 { 253,3354 }, { 254,3354 }, { 255,3354 }, { 256,3354 }, {   0,   0 },
 {   0,5648 }, {   1,3417 }, {   2,3417 }, {   3,3417 }, {   4,3417 },
 {   5,3417 }, {   6,3417 }, {   7,3417 }, {   8,3417 }, {   9,3096 },
 {  10,3096 }, {  11,3417 }, {  12,3417 }, {  13,3096 }, {  14,3417 },

 {  15,3417 }, {  16,3417 }, {  17,3417 }, {  18,3417 }, {  19,3417 },
 {  20,3417 }, {  21,3417 }, {  22,3417 }, {  23,3417 }, {  24,3417 },
 {  25,3417 }, {  26,3417 }, {  27,3417 }, {  28,3417 }, {  29,3417 },
 {  30,3417 }, {  31,3417 }, {  32,3114 }, {  33,3417 }, {  34,3417 },
 {  35,3417 }, {  36,3417 }, {  37,3417 }, {  38,3417 }, {  39,3417 },
 {  40,3417 }, {  41,3417 }, {  42,3417 }, {  43,3417 }, {  44,3417 },
 {  45,3417 }, {  46,3417 }, {  47,3417 }, {  48,3417 }, {  49,3417 },
 {  50,3417 }, {  51,3417 }, {  52,3417 }, {  53,3417 }, {  54,3417 },
 {  55,3417 }, {  56,3417 }, {  57,3417 }, {  58,3417 }, {  59,3417 },
 {  60,3417 }, {  61,3417 }, {  62,3417 }, {  63,3417 }, {  64,3116 },

 {  65,3417 }, {  66,3417 }, {  67,3417 }, {  68,3417 }, {  69,3417 },
 {  70,3417 }, {  71,3417 }, {  72,3417 }, {  73,3417 }, {  74,3417 },
 {  75,3417 }, {  76,3417 }, {  77,3417 }, {  78,3417 }, {  79,3417 },
 {  80,3417 }, {  81,3417 }, {  82,3417 }, {  83,3417 }, {  84,3417 },
 {  85,3417 }, {  86,3417 }, {  87,3417 }, {  88,3417 }, {  89,3417 },
 {  90,3417 }, {  91,3417 }, {  92,3417 }, {  93,3417 }, {  94,3417 },
 {  95,3417 }, {  96,3417 }, {  97,3417 }, {  98,3417 }, {  99,3417 },
 { 100,3417 }, { 101,3417 }, { 102,3417 }, { 103,3417 }, { 104,3417 },
 { 105,3417 }, { 106,3417 }, { 107,3417 }, { 108,3417 }, { 109,3417 },
 { 110,3417 }, { 111,3417 }, { 112,3417 }, { 113,3417 }, { 114,3417 },

 { 115,3417 }, { 116,3417 }, { 117,3417 }, { 118,3417 }, { 119,3417 },
 { 120,3417 }, { 121,3417 }, { 122,3417 }, { 123,3417 }, { 124,3417 },
 { 125,3417 }, { 126,3417 }, { 127,3417 }, { 128,3417 }, { 129,3417 },
 { 130,3417 }, { 131,3417 }, { 132,3417 }, { 133,3417 }, { 134,3417 },
 { 135,3417 }, { 136,3417 }, { 137,3417 }, { 138,3417 }, { 139,3417 },
 { 140,3417 }, { 141,3417 }, { 142,3417 }, { 143,3417 }, { 144,3417 },
 { 145,3417 }, { 146,3417 }, { 147,3417 }, { 148,3417 }, { 149,3417 },
 { 150,3417 }, { 151,3417 }, { 152,3417 }, { 153,3417 }, { 154,3417 },
 { 155,3417 }, { 156,3417 }, { 157,3417 }, { 158,3417 }, { 159,3417 },
 { 160,3417 }, { 161,3417 }, { 162,3417 }, { 163,3417 }, { 164,3417 },

 { 165,3417 }, { 166,3417 }, { 167,3417 }, { 168,3417 }, { 169,3417 },
 { 170,3417 }, { 171,3417 }, { 172,3417 }, { 173,3417 }, { 174,3417 },
 { 175,3417 }, { 176,3417 }, { 177,3417 }, { 178,3417 }, { 179,3417 },
 { 180,3417 }, { 181,3417 }, { 182,3417 }, { 183,3417 }, { 184,3417 },
 { 185,3417 }, { 186,3417 }, { 187,3417 }, { 188,3417 }, { 189,3417 },
 { 190,3417 }, { 191,3417 }, { 192,3417 }, { 193,3417 }, { 194,3417 },
 { 195,3417 }, { 196,3417 }, { 197,3417 }, { 198,3417 }, { 199,3417 },
 { 200,3417 }, { 201,3417 }, { 202,3417 }, { 203,3417 }, { 204,3417 },
 { 205,3417 }, { 206,3417 }, { 207,3417 }, { 208,3417 }, { 209,3417 },
 { 210,3417 }, { 211,3417 }, { 212,3417 }, { 213,3417 }, { 214,3417 },

 { 215,3417 }, { 216,3417 }, { 217,3417 }, { 218,3417 }, { 219,3417 },
 { 220,3417 }, { 221,3417 }, { 222,3417 }, { 223,3417 }, { 224,3417 },
 { 225,3417 }, { 226,3417 }, { 227,3417 }, { 228,3417 }, { 229,3417 },
 { 230,3417 }, { 231,3417 }, { 232,3417 }, { 233,3417 }, { 234,3417 },
 { 235,3417 }, { 236,3417 }, { 237,3417 }, { 238,3417 }, { 239,3417 },
 { 240,3417 }, { 241,3417 }, { 242,3417 }, { 243,3417 }, { 244,3417 },
 { 245,3417 }, { 246,3417 }, { 247,3417 }, { 248,3417 }, { 249,3417 },
 { 250,3417 }, { 251,3417 }, { 252,3417 }, { 253,3417 }, { 254,3417 },
 { 255,3417 }, { 256,3096 }, {   0,   0 }, {   0,5390 }, {   1,3159 },
 {   2,3159 }, {   3,3159 }, {   4,3159 }, {   5,3159 }, {   6,3159 },

 {   7,3159 }, {   8,3159 }, {   9,2838 }, {  10,2838 }, {  11,3159 },
 {  12,3159 }, {  13,2838 }, {  14,3159 }, {  15,3159 }, {  16,3159 },
 {  17,3159 }, {  18,3159 }, {  19,3159 }, {  20,3159 }, {  21,3159 },
 {  22,3159 }, {  23,3159 }, {  24,3159 }, {  25,3159 }, {  26,3159 },
 {  27,3159 }, {  28,3159 }, {  29,3159 }, {  30,3159 }, {  31,3159 },
 {  32,2856 }, {  33,3159 }, {  34,3159 }, {  35,3159 }, {  36,3159 },
 {  37,3159 }, {  38,3159 }, {  39,3159 }, {  40,3159 }, {  41,3159 },
 {  42,3159 }, {  43,3159 }, {  44,3159 }, {  45,3159 }, {  46,3159 },
 {  47,3159 }, {  48,3159 }, {  49,3159 }, {  50,3159 }, {  51,3159 },
 {  52,3159 }, {  53,3159 }, {  54,3159 }, {  55,3159 }, {  56,3159 },

 {  57,3159 }, {  58,3159 }, {  59,3159 }, {  60,3159 }, {  61,3159 },
 {  62,3159 }, {  63,3159 }, {  64,2858 }, {  65,3159 }, {  66,3159 },
 {  67,3159 }, {  68,3159 }, {  69,3159 }, {  70,3159 }, {  71,3159 },
 {  72,3159 }, {  73,3159 }, {  74,3159 }, {  75,3159 }, {  76,3159 },
 {  77,3159 }, {  78,3159 }, {  79,3159 }, {  80,3159 }, {  81,3159 },
 {  82,3159 }, {  83,3159 }, {  84,3159 }, {  85,3159 }, {  86,3159 },
 {  87,3159 }, {  88,3159 }, {  89,3159 }, {  90,3159 }, {  91,3159 },
 {  92,3159 }, {  93,3159 }, {  94,3159 }, {  95,3159 }, {  96,3159 },
 {  97,3159 }, {  98,3159 }, {  99,3159 }, { 100,3159 }, { 101,3159 },
 { 102,3159 }, { 103,3159 }, { 104,3159 }, { 105,3159 }, { 106,3159 },

 { 107,3159 }, { 108,3159 }, { 109,3159 }, { 110,3159 }, { 111,3159 },
 { 112,3159 }, { 113,3159 }, { 114,3159 }, { 115,3159 }, { 116,3159 },
 { 117,3159 }, { 118,3159 }, { 119,3159 }, { 120,3159 }, { 121,3159 },
 { 122,3159 }, { 123,3159 }, { 124,3159 }, { 125,3159 }, { 126,3159 },
 { 127,3159 }, { 128,3159 }, { 129,3159 }, { 130,3159 }, { 131,3159 },
 { 132,3159 }, { 133,3159 }, { 134,3159 }, { 135,3159 }, { 136,3159 },
 { 137,3159 }, { 138,3159 }, { 139,3159 }, { 140,3159 }, { 141,3159 },
 { 142,3159 }, { 143,3159 }, { 144,3159 }, { 145,3159 }, { 146,3159 },
 { 147,3159 }, { 148,3159 }, { 149,3159 }, { 150,3159 }, { 151,3159 },
 { 152,3159 }, { 153,3159 }, { 154,3159 }, { 155,3159 }, { 156,3159 },

 { 157,3159 }, { 158,3159 }, { 159,3159 }, { 160,3159 }, { 161,3159 },
 { 162,3159 }, { 163,3159 }, { 164,3159 }, { 165,3159 }, { 166,3159 },
 { 167,3159 }, { 168,3159 }, { 169,3159 }, { 170,3159 }, { 171,3159 },
 { 172,3159 }, { 173,3159 }, { 174,3159 }, { 175,3159 }, { 176,3159 },
 { 177,3159 }, { 178,3159 }, { 179,3159 }, { 180,3159 }, { 181,3159 },
 { 182,3159 }, { 183,3159 }, { 184,3159 }, { 185,3159 }, { 186,3159 },
 { 187,3159 }, { 188,3159 }, { 189,3159 }, { 190,3159 }, { 191,3159 },
 { 192,3159 }, { 193,3159 }, { 194,3159 }, { 195,3159 }, { 196,3159 },
 { 197,3159 }, { 198,3159 }, { 199,3159 }, { 200,3159 }, { 201,3159 },
 { 202,3159 }, { 203,3159 }, { 204,3159 }, { 205,3159 }, { 206,3159 },

 { 207,3159 }, { 208,3159 }, { 209,3159 }, { 210,3159 }, { 211,3159 },
 { 212,3159 }, { 213,3159 }, { 214,3159 }, { 215,3159 }, { 216,3159 },
 { 217,3159 }, { 218,3159 }, { 219,3159 }, { 220,3159 }, { 221,3159 },
 { 222,3159 }, { 223,3159 }, { 224,3159 }, { 225,3159 }, { 226,3159 },
 { 227,3159 }, { 228,3159 }, { 229,3159 }, { 230,3159 }, { 231,3159 },
 { 232,3159 }, { 233,3159 }, { 234,3159 }, { 235,3159 }, { 236,3159 },
 { 237,3159 }, { 238,3159 }, { 239,3159 }, { 240,3159 }, { 241,3159 },
 { 242,3159 }, { 243,3159 }, { 244,3159 }, { 245,3159 }, { 246,3159 },
 { 247,3159 }, { 248,3159 }, { 249,3159 }, { 250,3159 }, { 251,3159 },
 { 252,3159 }, { 253,3159 }, { 254,3159 }, { 255,3159 }, { 256,2838 },

 {   0,   0 }, {   0,5132 }, {   1,2580 }, {   2,2580 }, {   3,2580 },
 {   4,2580 }, {   5,2580 }, {   6,2580 }, {   7,2580 }, {   8,2580 },
 {   9,2580 }, {  10,2580 }, {  11,2580 }, {  12,2580 }, {  13,2580 },
 {  14,2580 }, {  15,2580 }, {  16,2580 }, {  17,2580 }, {  18,2580 },
 {  19,2580 }, {  20,2580 }, {  21,2580 }, {  22,2580 }, {  23,2580 },
 {  24,2580 }, {  25,2580 }, {  26,2580 }, {  27,2580 }, {  28,2580 },
 {  29,2580 }, {  30,2580 }, {  31,2580 }, {  32,2612 }, {  33,2580 },
 {  34,2580 }, {  35,2580 }, {  36,2580 }, {  37,2580 }, {  38,2580 },
 {  39,2580 }, {  40,2580 }, {  41,2580 }, {  42,2580 }, {  43,2580 },
 {  44,2580 }, {  45,3158 }, {  46,3158 }, {  47,2580 }, {  48,3158 },

 {  49,3158 }, {  50,3158 }, {  51,3158 }, {  52,3158 }, {  53,3158 },
 {  54,3158 }, {  55,3158 }, {  56,3158 }, {  57,3158 }, {  58,2580 },
 {  59,2580 }, {  60,2580 }, {  61,2580 }, {  62,2580 }, {  63,2580 },
 {  64,2580 }, {  65,3158 }, {  66,3158 }, {  67,3158 }, {  68,3158 },
 {  69,3158 }, {  70,3158 }, {  71,3158 }, {  72,3158 }, {  73,3158 },
 {  74,3158 }, {  75,3158 }, {  76,3158 }, {  77,3158 }, {  78,3158 },
 {  79,3158 }, {  80,3158 }, {  81,3158 }, {  82,3158 }, {  83,3158 },
 {  84,3158 }, {  85,3158 }, {  86,3158 }, {  87,3158 }, {  88,3158 },
 {  89,3158 }, {  90,3158 }, {  91,2580 }, {  92,2580 }, {  93,2580 },
 {  94,2580 }, {  95,2580 }, {  96,2580 }, {  97,3158 }, {  98,3158 },

 {  99,3158 }, { 100,3158 }, { 101,3158 }, { 102,3158 }, { 103,3158 },
 { 104,3158 }, { 105,3158 }, { 106,3158 }, { 107,3158 }, { 108,3158 },
 { 109,3158 }, { 110,3158 }, { 111,3158 }, { 112,3158 }, { 113,3158 },
 { 114,3158 }, { 115,3158 }, { 116,3158 }, { 117,3158 }, { 118,3158 },
 { 119,3158 }, { 120,3158 }, { 121,3158 }, { 122,3158 }, { 123,2580 },
 { 124,2580 }, { 125,2580 }, { 126,2580 }, { 127,2580 }, { 128,2580 },
 { 129,2580 }, { 130,2580 }, { 131,2580 }, { 132,2580 }, { 133,2580 },
 { 134,2580 }, { 135,2580 }, { 136,2580 }, { 137,2580 }, { 138,2580 },
 { 139,2580 }, { 140,2580 }, { 141,2580 }, { 142,2580 }, { 143,2580 },
 { 144,2580 }, { 145,2580 }, { 146,2580 }, { 147,2580 }, { 148,2580 },

 { 149,2580 }, { 150,2580 }, { 151,2580 }, { 152,2580 }, { 153,2580 },
 { 154,2580 }, { 155,2580 }, { 156,2580 }, { 157,2580 }, { 158,2580 },
 { 159,2580 }, { 160,2580 }, { 161,2580 }, { 162,2580 }, { 163,2580 },
 { 164,2580 }, { 165,2580 }, { 166,2580 }, { 167,2580 }, { 168,2580 },
 { 169,2580 }, { 170,2580 }, { 171,2580 }, { 172,2580 }, { 173,2580 },
 { 174,2580 }, { 175,2580 }, { 176,2580 }, { 177,2580 }, { 178,2580 },
 { 179,2580 }, { 180,2580 }, { 181,2580 }, { 182,2580 }, { 183,2580 },
 { 184,2580 }, { 185,2580 }, { 186,2580 }, { 187,2580 }, { 188,2580 },
 { 189,2580 }, { 190,2580 }, { 191,2580 }, { 192,2580 }, { 193,2580 },
 { 194,2580 }, { 195,2580 }, { 196,2580 }, { 197,2580 }, { 198,2580 },

 { 199,2580 }, { 200,2580 }, { 201,2580 }, { 202,2580 }, { 203,2580 },
 { 204,2580 }, { 205,2580 }, { 206,2580 }, { 207,2580 }, { 208,2580 },
 { 209,2580 }, { 210,2580 }, { 211,2580 }, { 212,2580 }, { 213,2580 },
 { 214,2580 }, { 215,2580 }, { 216,2580 }, { 217,2580 }, { 218,2580 },
 { 219,2580 }, { 220,2580 }, { 221,2580 }, { 222,2580 }, { 223,2580 },
 { 224,2580 }, { 225,2580 }, { 226,2580 }, { 227,2580 }, { 228,2580 },
 { 229,2580 }, { 230,2580 }, { 231,2580 }, { 232,2580 }, { 233,2580 },
 { 234,2580 }, { 235,2580 }, { 236,2580 }, { 237,2580 }, { 238,2580 },
 { 239,2580 }, { 240,2580 }, { 241,2580 }, { 242,2580 }, { 243,2580 },
 { 244,2580 }, { 245,2580 }, { 246,2580 }, { 247,2580 }, { 248,2580 },

 { 249,2580 }, { 250,2580 }, { 251,2580 }, { 252,2580 }, { 253,2580 },
 { 254,2580 }, { 255,2580 }, { 256,2580 }, {   0,   0 }, {   0,4874 },
 {   1,2322 }, {   2,2322 }, {   3,2322 }, {   4,2322 }, {   5,2322 },
 {   6,2322 }, {   7,2322 }, {   8,2322 }, {   9,2322 }, {  10,2322 },
 {  11,2322 }, {  12,2322 }, {  13,2322 }, {  14,2322 }, {  15,2322 },
 {  16,2322 }, {  17,2322 }, {  18,2322 }, {  19,2322 }, {  20,2322 },
 {  21,2322 }, {  22,2322 }, {  23,2322 }, {  24,2322 }, {  25,2322 },
 {  26,2322 }, {  27,2322 }, {  28,2322 }, {  29,2322 }, {  30,2322 },
 {  31,2322 }, {  32,2354 }, {  33,2322 }, {  34,2322 }, {  35,2322 },
 {  36,2322 }, {  37,2322 }, {  38,2322 }, {  39,2322 }, {  40,2322 },

 {  41,2322 }, {  42,2322 }, {  43,2322 }, {  44,2322 }, {  45,2900 },
 {  46,2900 }, {  47,2322 }, {  48,2900 }, {  49,2900 }, {  50,2900 },
 {  51,2900 }, {  52,2900 }, {  53,2900 }, {  54,2900 }, {  55,2900 },
 {  56,2900 }, {  57,2900 }, {  58,2322 }, {  59,2322 }, {  60,2322 },
 {  61,2322 }, {  62,2322 }, {  63,2322 }, {  64,2322 }, {  65,2900 },
 {  66,2900 }, {  67,2900 }, {  68,2900 }, {  69,2900 }, {  70,2900 },
 {  71,2900 }, {  72,2900 }, {  73,2900 }, {  74,2900 }, {  75,2900 },
 {  76,2900 }, {  77,2900 }, {  78,2900 }, {  79,2900 }, {  80,2900 },
 {  81,2900 }, {  82,2900 }, {  83,2900 }, {  84,2900 }, {  85,2900 },
 {  86,2900 }, {  87,2900 }, {  88,2900 }, {  89,2900 }, {  90,2900 },

 {  91,2322 }, {  92,2322 }, {  93,2322 }, {  94,2322 }, {  95,2322 },
 {  96,2322 }, {  97,2900 }, {  98,2900 }, {  99,2900 }, { 100,2900 },
 { 101,2900 }, { 102,2900 }, { 103,2900 }, { 104,2900 }, { 105,2900 },
 { 106,2900 }, { 107,2900 }, { 108,2900 }, { 109,2900 }, { 110,2900 },
 { 111,2900 }, { 112,2900 }, { 113,2900 }, { 114,2900 }, { 115,2900 },
 { 116,2900 }, { 117,2900 }, { 118,2900 }, { 119,2900 }, { 120,2900 },
 { 121,2900 }, { 122,2900 }, { 123,2322 }, { 124,2322 }, { 125,2322 },
 { 126,2322 }, { 127,2322 }, { 128,2322 }, { 129,2322 }, { 130,2322 },
 { 131,2322 }, { 132,2322 }, { 133,2322 }, { 134,2322 }, { 135,2322 },
 { 136,2322 }, { 137,2322 }, { 138,2322 }, { 139,2322 }, { 140,2322 },

 { 141,2322 }, { 142,2322 }, { 143,2322 }, { 144,2322 }, { 145,2322 },
 { 146,2322 }, { 147,2322 }, { 148,2322 }, { 149,2322 }, { 150,2322 },
 { 151,2322 }, { 152,2322 }, { 153,2322 }, { 154,2322 }, { 155,2322 },
 { 156,2322 }, { 157,2322 }, { 158,2322 }, { 159,2322 }, { 160,2322 },
 { 161,2322 }, { 162,2322 }, { 163,2322 }, { 164,2322 }, { 165,2322 },
 { 166,2322 }, { 167,2322 }, { 168,2322 }, { 169,2322 }, { 170,2322 },
 { 171,2322 }, { 172,2322 }, { 173,2322 }, { 174,2322 }, { 175,2322 },
 { 176,2322 }, { 177,2322 }, { 178,2322 }, { 179,2322 }, { 180,2322 },
 { 181,2322 }, { 182,2322 }, { 183,2322 }, { 184,2322 }, { 185,2322 },
 { 186,2322 }, { 187,2322 }, { 188,2322 }, { 189,2322 }, { 190,2322 },

 { 191,2322 }, { 192,2322 }, { 193,2322 }, { 194,2322 }, { 195,2322 },
 { 196,2322 }, { 197,2322 }, { 198,2322 }, { 199,2322 }, { 200,2322 },
 { 201,2322 }, { 202,2322 }, { 203,2322 }, { 204,2322 }, { 205,2322 },
 { 206,2322 }, { 207,2322 }, { 208,2322 }, { 209,2322 }, { 210,2322 },
 { 211,2322 }, { 212,2322 }, { 213,2322 }, { 214,2322 }, { 215,2322 },
 { 216,2322 }, { 217,2322 }, { 218,2322 }, { 219,2322 }, { 220,2322 },
 { 221,2322 }, { 222,2322 }, { 223,2322 }, { 224,2322 }, { 225,2322 },
 { 226,2322 }, { 227,2322 }, { 228,2322 }, { 229,2322 }, { 230,2322 },
 { 231,2322 }, { 232,2322 }, { 233,2322 }, { 234,2322 }, { 235,2322 },
 { 236,2322 }, { 237,2322 }, { 238,2322 }, { 239,2322 }, { 240,2322 },

 { 241,2322 }, { 242,2322 }, { 243,2322 }, { 244,2322 }, { 245,2322 },
 { 246,2322 }, { 247,2322 }, { 248,2322 }, { 249,2322 }, { 250,2322 },
 { 251,2322 }, { 252,2322 }, { 253,2322 }, { 254,2322 }, { 255,2322 },
 { 256,2322 }, {   0,   0 }, {   0,4616 }, {   1,2064 }, {   2,2064 },
 {   3,2064 }, {   4,2064 }, {   5,2064 }, {   6,2064 }, {   7,2064 },
 {   8,2064 }, {   9,2064 }, {  10,2064 }, {  11,2064 }, {  12,2064 },
 {  13,2064 }, {  14,2064 }, {  15,2064 }, {  16,2064 }, {  17,2064 },
 {  18,2064 }, {  19,2064 }, {  20,2064 }, {  21,2064 }, {  22,2064 },
 {  23,2064 }, {  24,2064 }, {  25,2064 }, {  26,2064 }, {  27,2064 },
 {  28,2064 }, {  29,2064 }, {  30,2064 }, {  31,2064 }, {  32,2068 },

 {  33,2064 }, {  34,2064 }, {  35,2064 }, {  36,2064 }, {  37,2064 },
 {  38,2064 }, {  39,2064 }, {  40,2064 }, {  41,2064 }, {  42,2064 },
 {  43,2064 }, {  44,2064 }, {  45,2064 }, {  46,2064 }, {  47,2064 },
 {  48,2070 }, {  49,2070 }, {  50,2070 }, {  51,2070 }, {  52,2070 },
 {  53,2070 }, {  54,2070 }, {  55,2070 }, {  56,2070 }, {  57,2070 },
 {  58,2064 }, {  59,2064 }, {  60,2064 }, {  61,2064 }, {  62,2064 },
 {  63,2064 }, {  64,2064 }, {  65,2074 }, {  66,2074 }, {  67,2074 },
 {  68,2074 }, {  69,2074 }, {  70,2074 }, {  71,2074 }, {  72,2074 },
 {  73,2074 }, {  74,2074 }, {  75,2074 }, {  76,2074 }, {  77,2074 },
 {  78,2074 }, {  79,2074 }, {  80,2074 }, {  81,2074 }, {  82,2074 },

 {  83,2074 }, {  84,2074 }, {  85,2074 }, {  86,2074 }, {  87,2074 },
 {  88,2074 }, {  89,2074 }, {  90,2074 }, {  91,2064 }, {  92,2064 },
 {  93,2064 }, {  94,2064 }, {  95,2064 }, {  96,2064 }, {  97,2074 },
 {  98,2074 }, {  99,2074 }, { 100,2074 }, { 101,2074 }, { 102,2074 },
 { 103,2074 }, { 104,2074 }, { 105,2074 }, { 106,2074 }, { 107,2074 },
 { 108,2074 }, { 109,2074 }, { 110,2074 }, { 111,2074 }, { 112,2074 },
 { 113,2074 }, { 114,2074 }, { 115,2074 }, { 116,2074 }, { 117,2074 },
 { 118,2074 }, { 119,2074 }, { 120,2074 }, { 121,2074 }, { 122,2074 },
 { 123,2064 }, { 124,2064 }, { 125,2064 }, { 126,2064 }, { 127,2064 },
 { 128,2064 }, { 129,2064 }, { 130,2064 }, { 131,2064 }, { 132,2064 },

 { 133,2064 }, { 134,2064 }, { 135,2064 }, { 136,2064 }, { 137,2064 },
 { 138,2064 }, { 139,2064 }, { 140,2064 }, { 141,2064 }, { 142,2064 },
 { 143,2064 }, { 144,2064 }, { 145,2064 }, { 146,2064 }, { 147,2064 },
 { 148,2064 }, { 149,2064 }, { 150,2064 }, { 151,2064 }, { 152,2064 },
 { 153,2064 }, { 154,2064 }, { 155,2064 }, { 156,2064 }, { 157,2064 },
 { 158,2064 }, { 159,2064 }, { 160,2064 }, { 161,2064 }, { 162,2064 },
 { 163,2064 }, { 164,2064 }, { 165,2064 }, { 166,2064 }, { 167,2064 },
 { 168,2064 }, { 169,2064 }, { 170,2064 }, { 171,2064 }, { 172,2064 },
 { 173,2064 }, { 174,2064 }, { 175,2064 }, { 176,2064 }, { 177,2064 },
 { 178,2064 }, { 179,2064 }, { 180,2064 }, { 181,2064 }, { 182,2064 },

 { 183,2064 }, { 184,2064 }, { 185,2064 }, { 186,2064 }, { 187,2064 },
 { 188,2064 }, { 189,2064 }, { 190,2064 }, { 191,2064 }, { 192,2064 },
 { 193,2064 }, { 194,2064 }, { 195,2064 }, { 196,2064 }, { 197,2064 },
 { 198,2064 }, { 199,2064 }, { 200,2064 }, { 201,2064 }, { 202,2064 },
 { 203,2064 }, { 204,2064 }, { 205,2064 }, { 206,2064 }, { 207,2064 },
 { 208,2064 }, { 209,2064 }, { 210,2064 }, { 211,2064 }, { 212,2064 },
 { 213,2064 }, { 214,2064 }, { 215,2064 }, { 216,2064 }, { 217,2064 },
 { 218,2064 }, { 219,2064 }, { 220,2064 }, { 221,2064 }, { 222,2064 },
 { 223,2064 }, { 224,2064 }, { 225,2064 }, { 226,2064 }, { 227,2064 },
 { 228,2064 }, { 229,2064 }, { 230,2064 }, { 231,2064 }, { 232,2064 },

 { 233,2064 }, { 234,2064 }, { 235,2064 }, { 236,2064 }, { 237,2064 },
 { 238,2064 }, { 239,2064 }, { 240,2064 }, { 241,2064 }, { 242,2064 },
 { 243,2064 }, { 244,2064 }, { 245,2064 }, { 246,2064 }, { 247,2064 },
 { 248,2064 }, { 249,2064 }, { 250,2064 }, { 251,2064 }, { 252,2064 },
 { 253,2064 }, { 254,2064 }, { 255,2064 }, { 256,2064 }, {   0,   0 },
 {   0,4358 }, {   1,1806 }, {   2,1806 }, {   3,1806 }, {   4,1806 },
 {   5,1806 }, {   6,1806 }, {   7,1806 }, {   8,1806 }, {   9,1806 },
 {  10,1806 }, {  11,1806 }, {  12,1806 }, {  13,1806 }, {  14,1806 },
 {  15,1806 }, {  16,1806 }, {  17,1806 }, {  18,1806 }, {  19,1806 },
 {  20,1806 }, {  21,1806 }, {  22,1806 }, {  23,1806 }, {  24,1806 },

 {  25,1806 }, {  26,1806 }, {  27,1806 }, {  28,1806 }, {  29,1806 },
 {  30,1806 }, {  31,1806 }, {  32,1810 }, {  33,1806 }, {  34,1806 },
 {  35,1806 }, {  36,1806 }, {  37,1806 }, {  38,1806 }, {  39,1806 },
 {  40,1806 }, {  41,1806 }, {  42,1806 }, {  43,1806 }, {  44,1806 },
 {  45,1806 }, {  46,1806 }, {  47,1806 }, {  48,1812 }, {  49,1812 },
 {  50,1812 }, {  51,1812 }, {  52,1812 }, {  53,1812 }, {  54,1812 },
 {  55,1812 }, {  56,1812 }, {  57,1812 }, {  58,1806 }, {  59,1806 },
 {  60,1806 }, {  61,1806 }, {  62,1806 }, {  63,1806 }, {  64,1806 },
 {  65,1816 }, {  66,1816 }, {  67,1816 }, {  68,1816 }, {  69,1816 },
 {  70,1816 }, {  71,1816 }, {  72,1816 }, {  73,1816 }, {  74,1816 },

 {  75,1816 }, {  76,1816 }, {  77,1816 }, {  78,1816 }, {  79,1816 },
 {  80,1816 }, {  81,1816 }, {  82,1816 }, {  83,1816 }, {  84,1816 },
 {  85,1816 }, {  86,1816 }, {  87,1816 }, {  88,1816 }, {  89,1816 },
 {  90,1816 }, {  91,1806 }, {  92,1806 }, {  93,1806 }, {  94,1806 },
 {  95,1806 }, {  96,1806 }, {  97,1816 }, {  98,1816 }, {  99,1816 },
 { 100,1816 }, { 101,1816 }, { 102,1816 }, { 103,1816 }, { 104,1816 },
 { 105,1816 }, { 106,1816 }, { 107,1816 }, { 108,1816 }, { 109,1816 },
 { 110,1816 }, { 111,1816 }, { 112,1816 }, { 113,1816 }, { 114,1816 },
 { 115,1816 }, { 116,1816 }, { 117,1816 }, { 118,1816 }, { 119,1816 },
 { 120,1816 }, { 121,1816 }, { 122,1816 }, { 123,1806 }, { 124,1806 },

 { 125,1806 }, { 126,1806 }, { 127,1806 }, { 128,1806 }, { 129,1806 },
 { 130,1806 }, { 131,1806 }, { 132,1806 }, { 133,1806 }, { 134,1806 },
 { 135,1806 }, { 136,1806 }, { 137,1806 }, { 138,1806 }, { 139,1806 },
 { 140,1806 }, { 141,1806 }, { 142,1806 }, { 143,1806 }, { 144,1806 },
 { 145,1806 }, { 146,1806 }, { 147,1806 }, { 148,1806 }, { 149,1806 },
 { 150,1806 }, { 151,1806 }, { 152,1806 }, { 153,1806 }, { 154,1806 },
 { 155,1806 }, { 156,1806 }, { 157,1806 }, { 158,1806 }, { 159,1806 },
 { 160,1806 }, { 161,1806 }, { 162,1806 }, { 163,1806 }, { 164,1806 },
 { 165,1806 }, { 166,1806 }, { 167,1806 }, { 168,1806 }, { 169,1806 },
 { 170,1806 }, { 171,1806 }, { 172,1806 }, { 173,1806 }, { 174,1806 },

 { 175,1806 }, { 176,1806 }, { 177,1806 }, { 178,1806 }, { 179,1806 },
 { 180,1806 }, { 181,1806 }, { 182,1806 }, { 183,1806 }, { 184,1806 },
 { 185,1806 }, { 186,1806 }, { 187,1806 }, { 188,1806 }, { 189,1806 },
 { 190,1806 }, { 191,1806 }, { 192,1806 }, { 193,1806 }, { 194,1806 },
 { 195,1806 }, { 196,1806 }, { 197,1806 }, { 198,1806 }, { 199,1806 },
 { 200,1806 }, { 201,1806 }, { 202,1806 }, { 203,1806 }, { 204,1806 },
 { 205,1806 }, { 206,1806 }, { 207,1806 }, { 208,1806 }, { 209,1806 },
 { 210,1806 }, { 211,1806 }, { 212,1806 }, { 213,1806 }, { 214,1806 },
 { 215,1806 }, { 216,1806 }, { 217,1806 }, { 218,1806 }, { 219,1806 },
 { 220,1806 }, { 221,1806 }, { 222,1806 }, { 223,1806 }, { 224,1806 },

 { 225,1806 }, { 226,1806 }, { 227,1806 }, { 228,1806 }, { 229,1806 },
 { 230,1806 }, { 231,1806 }, { 232,1806 }, { 233,1806 }, { 234,1806 },
 { 235,1806 }, { 236,1806 }, { 237,1806 }, { 238,1806 }, { 239,1806 },
 { 240,1806 }, { 241,1806 }, { 242,1806 }, { 243,1806 }, { 244,1806 },
 { 245,1806 }, { 246,1806 }, { 247,1806 }, { 248,1806 }, { 249,1806 },
 { 250,1806 }, { 251,1806 }, { 252,1806 }, { 253,1806 }, { 254,1806 },
 { 255,1806 }, { 256,1806 }, {   0,   0 }, {   0,4100 }, {   1,2250 },
 {   2,2250 }, {   3,2250 }, {   4,2250 }, {   5,2250 }, {   6,2250 },
 {   7,2250 }, {   8,2250 }, {   9,2250 }, {  10,1548 }, {  11,2250 },
 {  12,2250 }, {  13,1582 }, {  14,2250 }, {  15,2250 }, {  16,2250 },

 {  17,2250 }, {  18,2250 }, {  19,2250 }, {  20,2250 }, {  21,2250 },
 {  22,2250 }, {  23,2250 }, {  24,2250 }, {  25,2250 }, {  26,2250 },
 {  27,2250 }, {  28,2250 }, {  29,2250 }, {  30,2250 }, {  31,2250 },
 {  32,1586 }, {  33,2250 }, {  34,2250 }, {  35,2250 }, {  36,2250 },
 {  37,2250 }, {  38,2250 }, {  39,2250 }, {  40,2250 }, {  41,2250 },
 {  42,2250 }, {  43,2250 }, {  44,2250 }, {  45,2250 }, {  46,2250 },
 {  47,2250 }, {  48,2250 }, {  49,2250 }, {  50,2250 }, {  51,2250 },
 {  52,2250 }, {  53,2250 }, {  54,2250 }, {  55,2250 }, {  56,2250 },
 {  57,2250 }, {  58,1588 }, {  59,2250 }, {  60,2250 }, {  61,2250 },
 {  62,2250 }, {  63,2250 }, {  64,2250 }, {  65,2250 }, {  66,2250 },

 {  67,2250 }, {  68,2250 }, {  69,2250 }, {  70,2250 }, {  71,2250 },
 {  72,2250 }, {  73,2250 }, {  74,2250 }, {  75,2250 }, {  76,2250 },
 {  77,2250 }, {  78,2250 }, {  79,2250 }, {  80,2250 }, {  81,2250 },
 {  82,2250 }, {  83,2250 }, {  84,2250 }, {  85,2250 }, {  86,2250 },
 {  87,2250 }, {  88,2250 }, {  89,2250 }, {  90,2250 }, {  91,2250 },
 {  92,2250 }, {  93,2250 }, {  94,2250 }, {  95,2250 }, {  96,2250 },
 {  97,2250 }, {  98,2250 }, {  99,2250 }, { 100,2250 }, { 101,2250 },
 { 102,2250 }, { 103,2250 }, { 104,2250 }, { 105,2250 }, { 106,2250 },
 { 107,2250 }, { 108,2250 }, { 109,2250 }, { 110,2250 }, { 111,2250 },
 { 112,2250 }, { 113,2250 }, { 114,2250 }, { 115,2250 }, { 116,2250 },

 { 117,2250 }, { 118,2250 }, { 119,2250 }, { 120,2250 }, { 121,2250 },
 { 122,2250 }, { 123,2250 }, { 124,2250 }, { 125,2250 }, { 126,2250 },
 { 127,2250 }, { 128,2250 }, { 129,2250 }, { 130,2250 }, { 131,2250 },
 { 132,2250 }, { 133,2250 }, { 134,2250 }, { 135,2250 }, { 136,2250 },
 { 137,2250 }, { 138,2250 }, { 139,2250 }, { 140,2250 }, { 141,2250 },
 { 142,2250 }, { 143,2250 }, { 144,2250 }, { 145,2250 }, { 146,2250 },
 { 147,2250 }, { 148,2250 }, { 149,2250 }, { 150,2250 }, { 151,2250 },
 { 152,2250 }, { 153,2250 }, { 154,2250 }, { 155,2250 }, { 156,2250 },
 { 157,2250 }, { 158,2250 }, { 159,2250 }, { 160,2250 }, { 161,2250 },
 { 162,2250 }, { 163,2250 }, { 164,2250 }, { 165,2250 }, { 166,2250 },

 { 167,2250 }, { 168,2250 }, { 169,2250 }, { 170,2250 }, { 171,2250 },
 { 172,2250 }, { 173,2250 }, { 174,2250 }, { 175,2250 }, { 176,2250 },
 { 177,2250 }, { 178,2250 }, { 179,2250 }, { 180,2250 }, { 181,2250 },
 { 182,2250 }, { 183,2250 }, { 184,2250 }, { 185,2250 }, { 186,2250 },
 { 187,2250 }, { 188,2250 }, { 189,2250 }, { 190,2250 }, { 191,2250 },
 { 192,2250 }, { 193,2250 }, { 194,2250 }, { 195,2250 }, { 196,2250 },
 { 197,2250 }, { 198,2250 }, { 199,2250 }, { 200,2250 }, { 201,2250 },
 { 202,2250 }, { 203,2250 }, { 204,2250 }, { 205,2250 }, { 206,2250 },
 { 207,2250 }, { 208,2250 }, { 209,2250 }, { 210,2250 }, { 211,2250 },
 { 212,2250 }, { 213,2250 }, { 214,2250 }, { 215,2250 }, { 216,2250 },

 { 217,2250 }, { 218,2250 }, { 219,2250 }, { 220,2250 }, { 221,2250 },
 { 222,2250 }, { 223,2250 }, { 224,2250 }, { 225,2250 }, { 226,2250 },
 { 227,2250 }, { 228,2250 }, { 229,2250 }, { 230,2250 }, { 231,2250 },
 { 232,2250 }, { 233,2250 }, { 234,2250 }, { 235,2250 }, { 236,2250 },
 { 237,2250 }, { 238,2250 }, { 239,2250 }, { 240,2250 }, { 241,2250 },
 { 242,2250 }, { 243,2250 }, { 244,2250 }, { 245,2250 }, { 246,2250 },
 { 247,2250 }, { 248,2250 }, { 249,2250 }, { 250,2250 }, { 251,2250 },
 { 252,2250 }, { 253,2250 }, { 254,2250 }, { 255,2250 }, { 256,1548 },
 {   0,   0 }, {   0,3842 }, {   1,1992 }, {   2,1992 }, {   3,1992 },
 {   4,1992 }, {   5,1992 }, {   6,1992 }, {   7,1992 }, {   8,1992 },

 {   9,1992 }, {  10,1290 }, {  11,1992 }, {  12,1992 }, {  13,1324 },
 {  14,1992 }, {  15,1992 }, {  16,1992 }, {  17,1992 }, {  18,1992 },
 {  19,1992 }, {  20,1992 }, {  21,1992 }, {  22,1992 }, {  23,1992 },
 {  24,1992 }, {  25,1992 }, {  26,1992 }, {  27,1992 }, {  28,1992 },
 {  29,1992 }, {  30,1992 }, {  31,1992 }, {  32,1328 }, {  33,1992 },
 {  34,1992 }, {  35,1992 }, {  36,1992 }, {  37,1992 }, {  38,1992 },
 {  39,1992 }, {  40,1992 }, {  41,1992 }, {  42,1992 }, {  43,1992 },
 {  44,1992 }, {  45,1992 }, {  46,1992 }, {  47,1992 }, {  48,1992 },
 {  49,1992 }, {  50,1992 }, {  51,1992 }, {  52,1992 }, {  53,1992 },
 {  54,1992 }, {  55,1992 }, {  56,1992 }, {  57,1992 }, {  58,1330 },

 {  59,1992 }, {  60,1992 }, {  61,1992 }, {  62,1992 }, {  63,1992 },
 {  64,1992 }, {  65,1992 }, {  66,1992 }, {  67,1992 }, {  68,1992 },
 {  69,1992 }, {  70,1992 }, {  71,1992 }, {  72,1992 }, {  73,1992 },
 {  74,1992 }, {  75,1992 }, {  76,1992 }, {  77,1992 }, {  78,1992 },
 {  79,1992 }, {  80,1992 }, {  81,1992 }, {  82,1992 }, {  83,1992 },
 {  84,1992 }, {  85,1992 }, {  86,1992 }, {  87,1992 }, {  88,1992 },
 {  89,1992 }, {  90,1992 }, {  91,1992 }, {  92,1992 }, {  93,1992 },
 {  94,1992 }, {  95,1992 }, {  96,1992 }, {  97,1992 }, {  98,1992 },
 {  99,1992 }, { 100,1992 }, { 101,1992 }, { 102,1992 }, { 103,1992 },
 { 104,1992 }, { 105,1992 }, { 106,1992 }, { 107,1992 }, { 108,1992 },

 { 109,1992 }, { 110,1992 }, { 111,1992 }, { 112,1992 }, { 113,1992 },
 { 114,1992 }, { 115,1992 }, { 116,1992 }, { 117,1992 }, { 118,1992 },
 { 119,1992 }, { 120,1992 }, { 121,1992 }, { 122,1992 }, { 123,1992 },
 { 124,1992 }, { 125,1992 }, { 126,1992 }, { 127,1992 }, { 128,1992 },
 { 129,1992 }, { 130,1992 }, { 131,1992 }, { 132,1992 }, { 133,1992 },
 { 134,1992 }, { 135,1992 }, { 136,1992 }, { 137,1992 }, { 138,1992 },
 { 139,1992 }, { 140,1992 }, { 141,1992 }, { 142,1992 }, { 143,1992 },
 { 144,1992 }, { 145,1992 }, { 146,1992 }, { 147,1992 }, { 148,1992 },
 { 149,1992 }, { 150,1992 }, { 151,1992 }, { 152,1992 }, { 153,1992 },
 { 154,1992 }, { 155,1992 }, { 156,1992 }, { 157,1992 }, { 158,1992 },

 { 159,1992 }, { 160,1992 }, { 161,1992 }, { 162,1992 }, { 163,1992 },
 { 164,1992 }, { 165,1992 }, { 166,1992 }, { 167,1992 }, { 168,1992 },
 { 169,1992 }, { 170,1992 }, { 171,1992 }, { 172,1992 }, { 173,1992 },
 { 174,1992 }, { 175,1992 }, { 176,1992 }, { 177,1992 }, { 178,1992 },
 { 179,1992 }, { 180,1992 }, { 181,1992 }, { 182,1992 }, { 183,1992 },
 { 184,1992 }, { 185,1992 }, { 186,1992 }, { 187,1992 }, { 188,1992 },
 { 189,1992 }, { 190,1992 }, { 191,1992 }, { 192,1992 }, { 193,1992 },
 { 194,1992 }, { 195,1992 }, { 196,1992 }, { 197,1992 }, { 198,1992 },
 { 199,1992 }, { 200,1992 }, { 201,1992 }, { 202,1992 }, { 203,1992 },
 { 204,1992 }, { 205,1992 }, { 206,1992 }, { 207,1992 }, { 208,1992 },

 { 209,1992 }, { 210,1992 }, { 211,1992 }, { 212,1992 }, { 213,1992 },
 { 214,1992 }, { 215,1992 }, { 216,1992 }, { 217,1992 }, { 218,1992 },
 { 219,1992 }, { 220,1992 }, { 221,1992 }, { 222,1992 }, { 223,1992 },
 { 224,1992 }, { 225,1992 }, { 226,1992 }, { 227,1992 }, { 228,1992 },
 { 229,1992 }, { 230,1992 }, { 231,1992 }, { 232,1992 }, { 233,1992 },
 { 234,1992 }, { 235,1992 }, { 236,1992 }, { 237,1992 }, { 238,1992 },
 { 239,1992 }, { 240,1992 }, { 241,1992 }, { 242,1992 }, { 243,1992 },
 { 244,1992 }, { 245,1992 }, { 246,1992 }, { 247,1992 }, { 248,1992 },
 { 249,1992 }, { 250,1992 }, { 251,1992 }, { 252,1992 }, { 253,1992 },
 { 254,1992 }, { 255,1992 }, { 256,1290 }, {   0,  20 }, {   0,3584 },

 {   1,1991 }, {   2,1991 }, {   3,1991 }, {   4,1991 }, {   5,1991 },
 {   6,1991 }, {   7,1991 }, {   8,1991 }, {   9,1991 }, {  10,1032 },
 {  11,1991 }, {  12,1991 }, {  13,1074 }, {  14,1991 }, {  15,1991 },
 {  16,1991 }, {  17,1991 }, {  18,1991 }, {  19,1991 }, {  20,1991 },
 {  21,1991 }, {  22,1991 }, {  23,1991 }, {  24,1991 }, {  25,1991 },
 {  26,1991 }, {  27,1991 }, {  28,1991 }, {  29,1991 }, {  30,1991 },
 {  31,1991 }, {  32,1991 }, {  33,1991 }, {  34,1991 }, {  35,1991 },
 {  36,1991 }, {  37,1991 }, {  38,1991 }, {  39,1991 }, {  40,1991 },
 {  41,1991 }, {  42,1991 }, {  43,1991 }, {  44,1991 }, {  45,1991 },
 {  46,1991 }, {  47,1991 }, {  48,1991 }, {  49,1991 }, {  50,1991 },

 {  51,1991 }, {  52,1991 }, {  53,1991 }, {  54,1991 }, {  55,1991 },
 {  56,1991 }, {  57,1991 }, {  58,1991 }, {  59,1991 }, {  60,1991 },
 {  61,1991 }, {  62,1991 }, {  63,1991 }, {  64,1991 }, {  65,1991 },
 {  66,1991 }, {  67,1991 }, {  68,1991 }, {  69,1991 }, {  70,1991 },
 {  71,1991 }, {  72,1991 }, {  73,1991 }, {  74,1991 }, {  75,1991 },
 {  76,1991 }, {  77,1991 }, {  78,1991 }, {  79,1991 }, {  80,1991 },
 {  81,1991 }, {  82,1991 }, {  83,1991 }, {  84,1991 }, {  85,1991 },
 {  86,1991 }, {  87,1991 }, {  88,1991 }, {  89,1991 }, {  90,1991 },
 {  91,1991 }, {  92,1991 }, {  93,1991 }, {  94,1991 }, {  95,1991 },
 {  96,1991 }, {  97,1991 }, {  98,1991 }, {  99,1991 }, { 100,1991 },

 { 101,1991 }, { 102,1991 }, { 103,1991 }, { 104,1991 }, { 105,1991 },
 { 106,1991 }, { 107,1991 }, { 108,1991 }, { 109,1991 }, { 110,1991 },
 { 111,1991 }, { 112,1991 }, { 113,1991 }, { 114,1991 }, { 115,1991 },
 { 116,1991 }, { 117,1991 }, { 118,1991 }, { 119,1991 }, { 120,1991 },
 { 121,1991 }, { 122,1991 }, { 123,1991 }, { 124,1991 }, { 125,1991 },
 { 126,1991 }, { 127,1991 }, { 128,1991 }, { 129,1991 }, { 130,1991 },
 { 131,1991 }, { 132,1991 }, { 133,1991 }, { 134,1991 }, { 135,1991 },
 { 136,1991 }, { 137,1991 }, { 138,1991 }, { 139,1991 }, { 140,1991 },
 { 141,1991 }, { 142,1991 }, { 143,1991 }, { 144,1991 }, { 145,1991 },
 { 146,1991 }, { 147,1991 }, { 148,1991 }, { 149,1991 }, { 150,1991 },

 { 151,1991 }, { 152,1991 }, { 153,1991 }, { 154,1991 }, { 155,1991 },
 { 156,1991 }, { 157,1991 }, { 158,1991 }, { 159,1991 }, { 160,1991 },
 { 161,1991 }, { 162,1991 }, { 163,1991 }, { 164,1991 }, { 165,1991 },
 { 166,1991 }, { 167,1991 }, { 168,1991 }, { 169,1991 }, { 170,1991 },
 { 171,1991 }, { 172,1991 }, { 173,1991 }, { 174,1991 }, { 175,1991 },
 { 176,1991 }, { 177,1991 }, { 178,1991 }, { 179,1991 }, { 180,1991 },
 { 181,1991 }, { 182,1991 }, { 183,1991 }, { 184,1991 }, { 185,1991 },
 { 186,1991 }, { 187,1991 }, { 188,1991 }, { 189,1991 }, { 190,1991 },
 { 191,1991 }, { 192,1991 }, { 193,1991 }, { 194,1991 }, { 195,1991 },
 { 196,1991 }, { 197,1991 }, { 198,1991 }, { 199,1991 }, { 200,1991 },

 { 201,1991 }, { 202,1991 }, { 203,1991 }, { 204,1991 }, { 205,1991 },
 { 206,1991 }, { 207,1991 }, { 208,1991 }, { 209,1991 }, { 210,1991 },
 { 211,1991 }, { 212,1991 }, { 213,1991 }, { 214,1991 }, { 215,1991 },
 { 216,1991 }, { 217,1991 }, { 218,1991 }, { 219,1991 }, { 220,1991 },
 { 221,1991 }, { 222,1991 }, { 223,1991 }, { 224,1991 }, { 225,1991 },
 { 226,1991 }, { 227,1991 }, { 228,1991 }, { 229,1991 }, { 230,1991 },
 { 231,1991 }, { 232,1991 }, { 233,1991 }, { 234,1991 }, { 235,1991 },
 { 236,1991 }, { 237,1991 }, { 238,1991 }, { 239,1991 }, { 240,1991 },
 { 241,1991 }, { 242,1991 }, { 243,1991 }, { 244,1991 }, { 245,1991 },
 { 246,1991 }, { 247,1991 }, { 248,1991 }, { 249,1991 }, { 250,1991 },

 { 251,1991 }, { 252,1991 }, { 253,1991 }, { 254,1991 }, { 255,1991 },
 { 256,1032 }, {   0,  20 }, {   0,3326 }, {   1,1733 }, {   2,1733 },
 {   3,1733 }, {   4,1733 }, {   5,1733 }, {   6,1733 }, {   7,1733 },
 {   8,1733 }, {   9,1733 }, {  10, 774 }, {  11,1733 }, {  12,1733 },
 {  13, 816 }, {  14,1733 }, {  15,1733 }, {  16,1733 }, {  17,1733 },
 {  18,1733 }, {  19,1733 }, {  20,1733 }, {  21,1733 }, {  22,1733 },
 {  23,1733 }, {  24,1733 }, {  25,1733 }, {  26,1733 }, {  27,1733 },
 {  28,1733 }, {  29,1733 }, {  30,1733 }, {  31,1733 }, {  32,1733 },
 {  33,1733 }, {  34,1733 }, {  35,1733 }, {  36,1733 }, {  37,1733 },
 {  38,1733 }, {  39,1733 }, {  40,1733 }, {  41,1733 }, {  42,1733 },

 {  43,1733 }, {  44,1733 }, {  45,1733 }, {  46,1733 }, {  47,1733 },
 {  48,1733 }, {  49,1733 }, {  50,1733 }, {  51,1733 }, {  52,1733 },
 {  53,1733 }, {  54,1733 }, {  55,1733 }, {  56,1733 }, {  57,1733 },
 {  58,1733 }, {  59,1733 }, {  60,1733 }, {  61,1733 }, {  62,1733 },
 {  63,1733 }, {  64,1733 }, {  65,1733 }, {  66,1733 }, {  67,1733 },
 {  68,1733 }, {  69,1733 }, {  70,1733 }, {  71,1733 }, {  72,1733 },
 {  73,1733 }, {  74,1733 }, {  75,1733 }, {  76,1733 }, {  77,1733 },
 {  78,1733 }, {  79,1733 }, {  80,1733 }, {  81,1733 }, {  82,1733 },
 {  83,1733 }, {  84,1733 }, {  85,1733 }, {  86,1733 }, {  87,1733 },
 {  88,1733 }, {  89,1733 }, {  90,1733 }, {  91,1733 }, {  92,1733 },

 {  93,1733 }, {  94,1733 }, {  95,1733 }, {  96,1733 }, {  97,1733 },
 {  98,1733 }, {  99,1733 }, { 100,1733 }, { 101,1733 }, { 102,1733 },
 { 103,1733 }, { 104,1733 }, { 105,1733 }, { 106,1733 }, { 107,1733 },
 { 108,1733 }, { 109,1733 }, { 110,1733 }, { 111,1733 }, { 112,1733 },
 { 113,1733 }, { 114,1733 }, { 115,1733 }, { 116,1733 }, { 117,1733 },
 { 118,1733 }, { 119,1733 }, { 120,1733 }, { 121,1733 }, { 122,1733 },
 { 123,1733 }, { 124,1733 }, { 125,1733 }, { 126,1733 }, { 127,1733 },
 { 128,1733 }, { 129,1733 }, { 130,1733 }, { 131,1733 }, { 132,1733 },
 { 133,1733 }, { 134,1733 }, { 135,1733 }, { 136,1733 }, { 137,1733 },
 { 138,1733 }, { 139,1733 }, { 140,1733 }, { 141,1733 }, { 142,1733 },

 { 143,1733 }, { 144,1733 }, { 145,1733 }, { 146,1733 }, { 147,1733 },
 { 148,1733 }, { 149,1733 }, { 150,1733 }, { 151,1733 }, { 152,1733 },
 { 153,1733 }, { 154,1733 }, { 155,1733 }, { 156,1733 }, { 157,1733 },
 { 158,1733 }, { 159,1733 }, { 160,1733 }, { 161,1733 }, { 162,1733 },
 { 163,1733 }, { 164,1733 }, { 165,1733 }, { 166,1733 }, { 167,1733 },
 { 168,1733 }, { 169,1733 }, { 170,1733 }, { 171,1733 }, { 172,1733 },
 { 173,1733 }, { 174,1733 }, { 175,1733 }, { 176,1733 }, { 177,1733 },
 { 178,1733 }, { 179,1733 }, { 180,1733 }, { 181,1733 }, { 182,1733 },
 { 183,1733 }, { 184,1733 }, { 185,1733 }, { 186,1733 }, { 187,1733 },
 { 188,1733 }, { 189,1733 }, { 190,1733 }, { 191,1733 }, { 192,1733 },

 { 193,1733 }, { 194,1733 }, { 195,1733 }, { 196,1733 }, { 197,1733 },
 { 198,1733 }, { 199,1733 }, { 200,1733 }, { 201,1733 }, { 202,1733 },
 { 203,1733 }, { 204,1733 }, { 205,1733 }, { 206,1733 }, { 207,1733 },
 { 208,1733 }, { 209,1733 }, { 210,1733 }, { 211,1733 }, { 212,1733 },
 { 213,1733 }, { 214,1733 }, { 215,1733 }, { 216,1733 }, { 217,1733 },
 { 218,1733 }, { 219,1733 }, { 220,1733 }, { 221,1733 }, { 222,1733 },
 { 223,1733 }, { 224,1733 }, { 225,1733 }, { 226,1733 }, { 227,1733 },
 { 228,1733 }, { 229,1733 }, { 230,1733 }, { 231,1733 }, { 232,1733 },
 { 233,1733 }, { 234,1733 }, { 235,1733 }, { 236,1733 }, { 237,1733 },
 { 238,1733 }, { 239,1733 }, { 240,1733 }, { 241,1733 }, { 242,1733 },

 { 243,1733 }, { 244,1733 }, { 245,1733 }, { 246,1733 }, { 247,1733 },
 { 248,1733 }, { 249,1733 }, { 250,1733 }, { 251,1733 }, { 252,1733 },
 { 253,1733 }, { 254,1733 }, { 255,1733 }, { 256, 774 }, {   0,   0 },
 {   0,3068 }, {   1, 516 }, {   2, 516 }, {   3, 516 }, {   4, 516 },
 {   5, 516 }, {   6, 516 }, {   7, 516 }, {   8, 516 }, {   9, 516 },
 {  10, 562 }, {  11, 516 }, {  12, 516 }, {  13, 516 }, {  14, 516 },
 {  15, 516 }, {  16, 516 }, {  17, 516 }, {  18, 516 }, {  19, 516 },
 {  20, 516 }, {  21, 516 }, {  22, 516 }, {  23, 516 }, {  24, 516 },
 {  25, 516 }, {  26, 516 }, {  27, 516 }, {  28, 516 }, {  29, 516 },
 {  30, 516 }, {  31, 516 }, {  32, 516 }, {  33, 516 }, {  34, 516 },

 {  35, 516 }, {  36, 516 }, {  37, 516 }, {  38, 516 }, {  39, 516 },
 {  40, 516 }, {  41, 516 }, {  42, 516 }, {  43, 516 }, {  44, 516 },
 {  45, 516 }, {  46, 516 }, {  47, 516 }, {  48, 516 }, {  49, 516 },
 {  50, 516 }, {  51, 516 }, {  52, 516 }, {  53, 516 }, {  54, 516 },
 {  55, 516 }, {  56, 516 }, {  57, 516 }, {  58, 516 }, {  59, 516 },
 {  60, 516 }, {  61, 516 }, {  62, 516 }, {  63, 516 }, {  64, 516 },
 {  65, 516 }, {  66, 516 }, {  67, 516 }, {  68, 516 }, {  69, 516 },
 {  70, 516 }, {  71, 516 }, {  72, 516 }, {  73, 516 }, {  74, 516 },
 {  75, 516 }, {  76, 516 }, {  77, 516 }, {  78, 516 }, {  79, 516 },
 {  80, 516 }, {  81, 516 }, {  82, 516 }, {  83, 516 }, {  84, 516 },

 {  85, 516 }, {  86, 516 }, {  87, 516 }, {  88, 516 }, {  89, 516 },
 {  90, 516 }, {  91, 516 }, {  92, 516 }, {  93, 516 }, {  94, 516 },
 {  95, 516 }, {  96, 516 }, {  97, 516 }, {  98, 516 }, {  99, 516 },
 { 100, 516 }, { 101, 516 }, { 102, 516 }, { 103, 516 }, { 104, 516 },
 { 105, 516 }, { 106, 516 }, { 107, 516 }, { 108, 516 }, { 109, 516 },
 { 110, 516 }, { 111, 516 }, { 112, 516 }, { 113, 516 }, { 114, 516 },
 { 115, 516 }, { 116, 516 }, { 117, 516 }, { 118, 516 }, { 119, 516 },
 { 120, 516 }, { 121, 516 }, { 122, 516 }, { 123, 516 }, { 124, 516 },
 { 125, 516 }, { 126, 516 }, { 127, 516 }, { 128, 516 }, { 129, 516 },
 { 130, 516 }, { 131, 516 }, { 132, 516 }, { 133, 516 }, { 134, 516 },

 { 135, 516 }, { 136, 516 }, { 137, 516 }, { 138, 516 }, { 139, 516 },
 { 140, 516 }, { 141, 516 }, { 142, 516 }, { 143, 516 }, { 144, 516 },
 { 145, 516 }, { 146, 516 }, { 147, 516 }, { 148, 516 }, { 149, 516 },
 { 150, 516 }, { 151, 516 }, { 152, 516 }, { 153, 516 }, { 154, 516 },
 { 155, 516 }, { 156, 516 }, { 157, 516 }, { 158, 516 }, { 159, 516 },
 { 160, 516 }, { 161, 516 }, { 162, 516 }, { 163, 516 }, { 164, 516 },
 { 165, 516 }, { 166, 516 }, { 167, 516 }, { 168, 516 }, { 169, 516 },
 { 170, 516 }, { 171, 516 }, { 172, 516 }, { 173, 516 }, { 174, 516 },
 { 175, 516 }, { 176, 516 }, { 177, 516 }, { 178, 516 }, { 179, 516 },
 { 180, 516 }, { 181, 516 }, { 182, 516 }, { 183, 516 }, { 184, 516 },

 { 185, 516 }, { 186, 516 }, { 187, 516 }, { 188, 516 }, { 189, 516 },
 { 190, 516 }, { 191, 516 }, { 192, 516 }, { 193, 516 }, { 194, 516 },
 { 195, 516 }, { 196, 516 }, { 197, 516 }, { 198, 516 }, { 199, 516 },
 { 200, 516 }, { 201, 516 }, { 202, 516 }, { 203, 516 }, { 204, 516 },
 { 205, 516 }, { 206, 516 }, { 207, 516 }, { 208, 516 }, { 209, 516 },
 { 210, 516 }, { 211, 516 }, { 212, 516 }, { 213, 516 }, { 214, 516 },
 { 215, 516 }, { 216, 516 }, { 217, 516 }, { 218, 516 }, { 219, 516 },
 { 220, 516 }, { 221, 516 }, { 222, 516 }, { 223, 516 }, { 224, 516 },
 { 225, 516 }, { 226, 516 }, { 227, 516 }, { 228, 516 }, { 229, 516 },
 { 230, 516 }, { 231, 516 }, { 232, 516 }, { 233, 516 }, { 234, 516 },

 { 235, 516 }, { 236, 516 }, { 237, 516 }, { 238, 516 }, { 239, 516 },
 { 240, 516 }, { 241, 516 }, { 242, 516 }, { 243, 516 }, { 244, 516 },
 { 245, 516 }, { 246, 516 }, { 247, 516 }, { 248, 516 }, { 249, 516 },
 { 250, 516 }, { 251, 516 }, { 252, 516 }, { 253, 516 }, { 254, 516 },
 { 255, 516 }, { 256, 516 }, {   0,   0 }, {   0,2810 }, {   1, 258 },
 {   2, 258 }, {   3, 258 }, {   4, 258 }, {   5, 258 }, {   6, 258 },
 {   7, 258 }, {   8, 258 }, {   9, 258 }, {  10, 304 }, {  11, 258 },
 {  12, 258 }, {  13, 258 }, {  14, 258 }, {  15, 258 }, {  16, 258 },
 {  17, 258 }, {  18, 258 }, {  19, 258 }, {  20, 258 }, {  21, 258 },
 {  22, 258 }, {  23, 258 }, {  24, 258 }, {  25, 258 }, {  26, 258 },

 {  27, 258 }, {  28, 258 }, {  29, 258 }, {  30, 258 }, {  31, 258 },
 {  32, 258 }, {  33, 258 }, {  34, 258 }, {  35, 258 }, {  36, 258 },
 {  37, 258 }, {  38, 258 }, {  39, 258 }, {  40, 258 }, {  41, 258 },
 {  42, 258 }, {  43, 258 }, {  44, 258 }, {  45, 258 }, {  46, 258 },
 {  47, 258 }, {  48, 258 }, {  49, 258 }, {  50, 258 }, {  51, 258 },
 {  52, 258 }, {  53, 258 }, {  54, 258 }, {  55, 258 }, {  56, 258 },
 {  57, 258 }, {  58, 258 }, {  59, 258 }, {  60, 258 }, {  61, 258 },
 {  62, 258 }, {  63, 258 }, {  64, 258 }, {  65, 258 }, {  66, 258 },
 {  67, 258 }, {  68, 258 }, {  69, 258 }, {  70, 258 }, {  71, 258 },
 {  72, 258 }, {  73, 258 }, {  74, 258 }, {  75, 258 }, {  76, 258 },

 {  77, 258 }, {  78, 258 }, {  79, 258 }, {  80, 258 }, {  81, 258 },
 {  82, 258 }, {  83, 258 }, {  84, 258 }, {  85, 258 }, {  86, 258 },
 {  87, 258 }, {  88, 258 }, {  89, 258 }, {  90, 258 }, {  91, 258 },
 {  92, 258 }, {  93, 258 }, {  94, 258 }, {  95, 258 }, {  96, 258 },
 {  97, 258 }, {  98, 258 }, {  99, 258 }, { 100, 258 }, { 101, 258 },
 { 102, 258 }, { 103, 258 }, { 104, 258 }, { 105, 258 }, { 106, 258 },
 { 107, 258 }, { 108, 258 }, { 109, 258 }, { 110, 258 }, { 111, 258 },
 { 112, 258 }, { 113, 258 }, { 114, 258 }, { 115, 258 }, { 116, 258 },
 { 117, 258 }, { 118, 258 }, { 119, 258 }, { 120, 258 }, { 121, 258 },
 { 122, 258 }, { 123, 258 }, { 124, 258 }, { 125, 258 }, { 126, 258 },

 { 127, 258 }, { 128, 258 }, { 129, 258 }, { 130, 258 }, { 131, 258 },
 { 132, 258 }, { 133, 258 }, { 134, 258 }, { 135, 258 }, { 136, 258 },
 { 137, 258 }, { 138, 258 }, { 139, 258 }, { 140, 258 }, { 141, 258 },
 { 142, 258 }, { 143, 258 }, { 144, 258 }, { 145, 258 }, { 146, 258 },
 { 147, 258 }, { 148, 258 }, { 149, 258 }, { 150, 258 }, { 151, 258 },
 { 152, 258 }, { 153, 258 }, { 154, 258 }, { 155, 258 }, { 156, 258 },
 { 157, 258 }, { 158, 258 }, { 159, 258 }, { 160, 258 }, { 161, 258 },
 { 162, 258 }, { 163, 258 }, { 164, 258 }, { 165, 258 }, { 166, 258 },
 { 167, 258 }, { 168, 258 }, { 169, 258 }, { 170, 258 }, { 171, 258 },
 { 172, 258 }, { 173, 258 }, { 174, 258 }, { 175, 258 }, { 176, 258 },

 { 177, 258 }, { 178, 258 }, { 179, 258 }, { 180, 258 }, { 181, 258 },
 { 182, 258 }, { 183, 258 }, { 184, 258 }, { 185, 258 }, { 186, 258 },
 { 187, 258 }, { 188, 258 }, { 189, 258 }, { 190, 258 }, { 191, 258 },
 { 192, 258 }, { 193, 258 }, { 194, 258 }, { 195, 258 }, { 196, 258 },
 { 197, 258 }, { 198, 258 }, { 199, 258 }, { 200, 258 }, { 201, 258 },
 { 202, 258 }, { 203, 258 }, { 204, 258 }, { 205, 258 }, { 206, 258 },
 { 207, 258 }, { 208, 258 }, { 209, 258 }, { 210, 258 }, { 211, 258 },
 { 212, 258 }, { 213, 258 }, { 214, 258 }, { 215, 258 }, { 216, 258 },
 { 217, 258 }, { 218, 258 }, { 219, 258 }, { 220, 258 }, { 221, 258 },
 { 222, 258 }, { 223, 258 }, { 224, 258 }, { 225, 258 }, { 226, 258 },

 { 227, 258 }, { 228, 258 }, { 229, 258 }, { 230, 258 }, { 231, 258 },
 { 232, 258 }, { 233, 258 }, { 234, 258 }, { 235, 258 }, { 236, 258 },
 { 237, 258 }, { 238, 258 }, { 239, 258 }, { 240, 258 }, { 241, 258 },
 { 242, 258 }, { 243, 258 }, { 244, 258 }, { 245, 258 }, { 246, 258 },
 { 247, 258 }, { 248, 258 }, { 249, 258 }, { 250, 258 }, { 251, 258 },
 { 252, 258 }, { 253, 258 }, { 254, 258 }, { 255, 258 }, { 256, 258 },
 {   0,  22 }, {   0,2552 }, {   0,   2 }, {   0,2550 }, {   0,  12 },
 {   0,2548 }, {   0,  22 }, {   0,2546 }, {   0,   1 }, {   0,2544 },
 {   0,  14 }, {   0,2542 }, {   0,   3 }, {   0,2540 }, {   0,   4 },
 {   0,2538 }, {   0,   5 }, {   0,2536 }, {   0,   7 }, {   0,2534 },

 {   0,   8 }, {   0,2532 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,  10 }, {   0,2520 }, {   0,  17 },
 {   0,2518 }, {   0,   0 }, {  32,  68 }, {   0,  15 }, {   0,2514 },
 {   0,  16 }, {   0,2512 }, {   0,  19 }, {   0,2510 }, {   0,   0 },
 {  32,  62 }, {   0,  21 }, {   0,2506 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  32, 116 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,1210 }, {  49,1210 }, {  50,1210 }, {  51,1210 }, {  52,1210 },
 {  53,1210 }, {  54,1210 }, {  55,1210 }, {  56,1210 }, {  57,1210 },
 {  32, 131 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  32, 127 }, {   0,  12 }, {   0,2480 }, {   0,   3 },
 {   0,2478 }, {  65,1208 }, {  66,1208 }, {  67,1208 }, {  68,1208 },
 {  69,1208 }, {  70,1208 }, {  71,1208 }, {  72,1208 }, {  73,1208 },
 {  74,1208 }, {  75,1208 }, {  76,1208 }, {  77,1208 }, {  78,1208 },
 {  79,1208 }, {  80,1208 }, {  81,1208 }, {  82,1208 }, {  83,1208 },
 {  84,1208 }, {  85,1208 }, {  86,1208 }, {  87,1208 }, {  88,1208 },
 {  89,1208 }, {  90,1208 }, {   0,   6 }, {   0,2450 }, {   0,   0 },
 {  32,   0 }, {   0,   0 }, {  32,   0 }, {  97,1208 }, {  98,1208 },
 {  99,1208 }, { 100,1208 }, { 101,1208 }, { 102,1208 }, { 103,1208 },
 { 104,1208 }, { 105,1208 }, { 106,1208 }, { 107,1208 }, { 108,1208 },

 { 109,1208 }, { 110,1208 }, { 111,1208 }, { 112,1208 }, { 113,1208 },
 { 114,1208 }, { 115,1208 }, { 116,1208 }, { 117,1208 }, { 118,1208 },
 { 119,1208 }, { 120,1208 }, { 121,1208 }, { 122,1208 }, {   0,   7 },
 {   0,2418 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  45,1208 }, {  46,1208 },
 {   0,   0 }, {  48,1208 }, {  49,1208 }, {  50,1208 }, {  51,1208 },
 {  52,1208 }, {  53,1208 }, {  54,1208 }, {  55,1208 }, {  56,1208 },
 {  57,1208 }, {   0,   0 }, {   0,   0 }, {   0,  10 }, {   0,2389 },
 {   0,  15 }, {   0,2387 }, {  32,   0 }, {  65,1208 }, {  66,1208 },

 {  67,1208 }, {  68,1208 }, {  69,1208 }, {  70,1208 }, {  71,1208 },
 {  72,1208 }, {  73,1208 }, {  74,1208 }, {  75,1208 }, {  76,1208 },
 {  77,1208 }, {  78,1208 }, {  79,1208 }, {  80,1208 }, {  81,1208 },
 {  82,1208 }, {  83,1208 }, {  84,1208 }, {  85,1208 }, {  86,1208 },
 {  87,1208 }, {  88,1208 }, {  89,1208 }, {  90,1208 }, {   0,   6 },
 {   0,2358 }, {  32,   0 }, {   0,   0 }, {  32,   0 }, {   0,   0 },
 {  97,1208 }, {  98,1208 }, {  99,1208 }, { 100,1208 }, { 101,1208 },
 { 102,1208 }, { 103,1208 }, { 104,1208 }, { 105,1208 }, { 106,1208 },
 { 107,1208 }, { 108,1208 }, { 109,1208 }, { 110,1208 }, { 111,1208 },
 { 112,1208 }, { 113,1208 }, { 114,1208 }, { 115,1208 }, { 116,1208 },

 { 117,1208 }, { 118,1208 }, { 119,1208 }, { 120,1208 }, { 121,1208 },
 { 122,1208 }, {   0,  13 }, {   0,2326 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  45,1208 }, {  46,1116 }, {   0,   0 }, {  48,1208 }, {  49,1208 },
 {  50,1208 }, {  51,1208 }, {  52,1208 }, {  53,1208 }, {  54,1208 },
 {  55,1208 }, {  56,1208 }, {  57,1208 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,1208 }, {  66,1208 }, {  67,1208 }, {  68,1208 }, {  69,1208 },
 {  70,1208 }, {  71,1208 }, {  72,1208 }, {  73,1208 }, {  74,1208 },

 {  75,1208 }, {  76,1208 }, {  77,1208 }, {  78,1208 }, {  79,1208 },
 {  80,1208 }, {  81,1208 }, {  82,1208 }, {  83,1208 }, {  84,1208 },
 {  85,1208 }, {  86,1208 }, {  87,1208 }, {  88,1208 }, {  89,1208 },
 {  90,1208 }, {  91,1335 }, {  92,1335 }, {  93,1335 }, {  94,1335 },
 {  95,1335 }, {  96,1335 }, {  97,1208 }, {  98,1208 }, {  99,1208 },
 { 100,1208 }, { 101,1208 }, { 102,1208 }, { 103,1208 }, { 104,1208 },
 { 105,1208 }, { 106,1208 }, { 107,1208 }, { 108,1208 }, { 109,1208 },
 { 110,1208 }, { 111,1208 }, { 112,1208 }, { 113,1208 }, { 114,1208 },
 { 115,1208 }, { 116,1208 }, { 117,1208 }, { 118,1208 }, { 119,1208 },
 { 120,1208 }, { 121,1208 }, { 122,1208 }, { 123,1335 }, {   0,   0 },

 { 125,1335 }, {   0,   9 }, {   0,2231 }, {   1,1335 }, {   2,1335 },
 {   3,1335 }, {   4,1335 }, {   5,1335 }, {   6,1335 }, {   7,1335 },
 {   8,1335 }, {   0,   0 }, {   0,   0 }, {  11,1335 }, {  12,1335 },
 {   0,   0 }, {  14,1335 }, {  15,1335 }, {  16,1335 }, {  17,1335 },
 {  18,1335 }, {  19,1335 }, {  20,1335 }, {  21,1335 }, {  22,1335 },
 {  23,1335 }, {  24,1335 }, {  25,1335 }, {  26,1335 }, {  27,1335 },
 {  28,1335 }, {  29,1335 }, {  30,1335 }, {  31,1335 }, {   0,   0 },
 {  33,1335 }, {  34,1335 }, {  35,1335 }, {  36,1335 }, {  37,1335 },
 {  38,1335 }, {  39,1335 }, {  40,1335 }, {  41,1335 }, {  42,1335 },
 {  43,1335 }, {  44,1335 }, {  45,1335 }, {  46,1335 }, {  47,1335 },

 {  48,1335 }, {  49,1335 }, {  50,1335 }, {  51,1335 }, {  52,1335 },
 {  53,1335 }, {  54,1335 }, {  55,1335 }, {  56,1335 }, {  57,1335 },
 {  58,1335 }, {  59,1335 }, {  60,1335 }, {  61,1335 }, {  62,1335 },
 {  63,1335 }, {   0,   0 }, {  65,1335 }, {  66,1335 }, {  67,1335 },
 {  68,1335 }, {  69,1335 }, {  70,1335 }, {  71,1335 }, {  72,1335 },
 {  73,1335 }, {  74,1335 }, {  75,1335 }, {  76,1335 }, {  77,1335 },
 {  78,1335 }, {  79,1335 }, {  80,1335 }, {  81,1335 }, {  82,1335 },
 {  83,1335 }, {  84,1335 }, {  85,1335 }, {  86,1335 }, {  87,1335 },
 {  88,1335 }, {  89,1335 }, {  90,1335 }, {  91,1335 }, {  92,1335 },
 {  93,1335 }, {  94,1335 }, {  95,1335 }, {  96,1335 }, {  97,1335 },

 {  98,1335 }, {  99,1335 }, { 100,1335 }, { 101,1335 }, { 102,1335 },
 { 103,1335 }, { 104,1335 }, { 105,1335 }, { 106,1335 }, { 107,1335 },
 { 108,1335 }, { 109,1335 }, { 110,1335 }, { 111,1335 }, { 112,1335 },
 { 113,1335 }, { 114,1335 }, { 115,1335 }, { 116,1335 }, { 117,1335 },
 { 118,1335 }, { 119,1335 }, { 120,1335 }, { 121,1335 }, { 122,1335 },
 { 123,1335 }, { 124,1335 }, { 125,1335 }, { 126,1335 }, { 127,1335 },
 { 128,1335 }, { 129,1335 }, { 130,1335 }, { 131,1335 }, { 132,1335 },
 { 133,1335 }, { 134,1335 }, { 135,1335 }, { 136,1335 }, { 137,1335 },
 { 138,1335 }, { 139,1335 }, { 140,1335 }, { 141,1335 }, { 142,1335 },
 { 143,1335 }, { 144,1335 }, { 145,1335 }, { 146,1335 }, { 147,1335 },

 { 148,1335 }, { 149,1335 }, { 150,1335 }, { 151,1335 }, { 152,1335 },
 { 153,1335 }, { 154,1335 }, { 155,1335 }, { 156,1335 }, { 157,1335 },
 { 158,1335 }, { 159,1335 }, { 160,1335 }, { 161,1335 }, { 162,1335 },
 { 163,1335 }, { 164,1335 }, { 165,1335 }, { 166,1335 }, { 167,1335 },
 { 168,1335 }, { 169,1335 }, { 170,1335 }, { 171,1335 }, { 172,1335 },
 { 173,1335 }, { 174,1335 }, { 175,1335 }, { 176,1335 }, { 177,1335 },
 { 178,1335 }, { 179,1335 }, { 180,1335 }, { 181,1335 }, { 182,1335 },
 { 183,1335 }, { 184,1335 }, { 185,1335 }, { 186,1335 }, { 187,1335 },
 { 188,1335 }, { 189,1335 }, { 190,1335 }, { 191,1335 }, { 192,1335 },
 { 193,1335 }, { 194,1335 }, { 195,1335 }, { 196,1335 }, { 197,1335 },

 { 198,1335 }, { 199,1335 }, { 200,1335 }, { 201,1335 }, { 202,1335 },
 { 203,1335 }, { 204,1335 }, { 205,1335 }, { 206,1335 }, { 207,1335 },
 { 208,1335 }, { 209,1335 }, { 210,1335 }, { 211,1335 }, { 212,1335 },
 { 213,1335 }, { 214,1335 }, { 215,1335 }, { 216,1335 }, { 217,1335 },
 { 218,1335 }, { 219,1335 }, { 220,1335 }, { 221,1335 }, { 222,1335 },
 { 223,1335 }, { 224,1335 }, { 225,1335 }, { 226,1335 }, { 227,1335 },
 { 228,1335 }, { 229,1335 }, { 230,1335 }, { 231,1335 }, { 232,1335 },
 { 233,1335 }, { 234,1335 }, { 235,1335 }, { 236,1335 }, { 237,1335 },
 { 238,1335 }, { 239,1335 }, { 240,1335 }, { 241,1335 }, { 242,1335 },
 { 243,1335 }, { 244,1335 }, { 245,1335 }, { 246,1335 }, { 247,1335 },

 { 248,1335 }, { 249,1335 }, { 250,1335 }, { 251,1335 }, { 252,1335 },
 { 253,1335 }, { 254,1335 }, { 255,1335 }, {   0,  11 }, {   0,1974 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  45,1335 },
 {  46,1335 }, {   0,   0 }, {  48,1335 }, {  49,1335 }, {  50,1335 },
 {  51,1335 }, {  52,1335 }, {  53,1335 }, {  54,1335 }, {  55,1335 },
 {  56,1335 }, {  57,1335 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,1335 },
 {  66,1335 }, {  67,1335 }, {  68,1335 }, {  69,1335 }, {  70,1335 },
 {  71,1335 }, {  72,1335 }, {  73,1335 }, {  74,1335 }, {  75,1335 },
 {  76,1335 }, {  77,1335 }, {  78,1335 }, {  79,1335 }, {  80,1335 },
 {  81,1335 }, {  82,1335 }, {  83,1335 }, {  84,1335 }, {  85,1335 },
 {  86,1335 }, {  87,1335 }, {  88,1335 }, {  89,1335 }, {  90,1335 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  97,1335 }, {  98,1335 }, {  99,1335 }, { 100,1335 },
 { 101,1335 }, { 102,1335 }, { 103,1335 }, { 104,1335 }, { 105,1335 },
 { 106,1335 }, { 107,1335 }, { 108,1335 }, { 109,1335 }, { 110,1335 },
 { 111,1335 }, { 112,1335 }, { 113,1335 }, { 114,1335 }, { 115,1335 },
 { 116,1335 }, { 117,1335 }, { 118,1335 }, { 119,1335 }, { 120,1335 },
 { 121,1335 }, { 122,1335 }, {   0,  18 }, {   0,1850 }, {   1,1335 },
 {   2,1335 }, {   3,1335 }, {   4,1335 }, {   5,1335 }, {   6,1335 },
 {   7,1335 }, {   8,1335 }, {   9,1335 }, {   0,   0 }, {  11,1335 },
 {  12,1335 }, {   0,   0 }, {  14,1335 }, {  15,1335 }, {  16,1335 },

 {  17,1335 }, {  18,1335 }, {  19,1335 }, {  20,1335 }, {  21,1335 },
 {  22,1335 }, {  23,1335 }, {  24,1335 }, {  25,1335 }, {  26,1335 },
 {  27,1335 }, {  28,1335 }, {  29,1335 }, {  30,1335 }, {  31,1335 },
 {   0,   0 }, {  33,1335 }, {  34,1335 }, {  35,1335 }, {  36,1335 },
 {  37,1335 }, {  38,1335 }, {  39,1335 }, {  40,1335 }, {  41,1335 },
 {  42,1335 }, {  43,1335 }, {  44,1335 }, {  45,1335 }, {  46,1335 },
 {  47,1335 }, {  48,1335 }, {  49,1335 }, {  50,1335 }, {  51,1335 },
 {  52,1335 }, {  53,1335 }, {  54,1335 }, {  55,1335 }, {  56,1335 },
 {  57,1335 }, {  58,1335 }, {  59,1335 }, {  60,1335 }, {  61,1335 },
 {  62,1335 }, {  63,1335 }, {  64,1335 }, {  65,1335 }, {  66,1335 },

 {  67,1335 }, {  68,1335 }, {  69,1335 }, {  70,1335 }, {  71,1335 },
 {  72,1335 }, {  73,1335 }, {  74,1335 }, {  75,1335 }, {  76,1335 },
 {  77,1335 }, {  78,1335 }, {  79,1335 }, {  80,1335 }, {  81,1335 },
 {  82,1335 }, {  83,1335 }, {  84,1335 }, {  85,1335 }, {  86,1335 },
 {  87,1335 }, {  88,1335 }, {  89,1335 }, {  90,1335 }, {  91,1335 },
 {  92,1335 }, {  93,1335 }, {  94,1335 }, {  95,1335 }, {  96,1335 },
 {  97,1335 }, {  98,1335 }, {  99,1335 }, { 100,1335 }, { 101,1335 },
 { 102,1335 }, { 103,1335 }, { 104,1335 }, { 105,1335 }, { 106,1335 },
 { 107,1335 }, { 108,1335 }, { 109,1335 }, { 110,1335 }, { 111,1335 },
 { 112,1335 }, { 113,1335 }, { 114,1335 }, { 115,1335 }, { 116,1335 },

 { 117,1335 }, { 118,1335 }, { 119,1335 }, { 120,1335 }, { 121,1335 },
 { 122,1335 }, { 123,1335 }, { 124,1335 }, { 125,1335 }, { 126,1335 },
 { 127,1335 }, { 128,1335 }, { 129,1335 }, { 130,1335 }, { 131,1335 },
 { 132,1335 }, { 133,1335 }, { 134,1335 }, { 135,1335 }, { 136,1335 },
 { 137,1335 }, { 138,1335 }, { 139,1335 }, { 140,1335 }, { 141,1335 },
 { 142,1335 }, { 143,1335 }, { 144,1335 }, { 145,1335 }, { 146,1335 },
 { 147,1335 }, { 148,1335 }, { 149,1335 }, { 150,1335 }, { 151,1335 },
 { 152,1335 }, { 153,1335 }, { 154,1335 }, { 155,1335 }, { 156,1335 },
 { 157,1335 }, { 158,1335 }, { 159,1335 }, { 160,1335 }, { 161,1335 },
 { 162,1335 }, { 163,1335 }, { 164,1335 }, { 165,1335 }, { 166,1335 },

 { 167,1335 }, { 168,1335 }, { 169,1335 }, { 170,1335 }, { 171,1335 },
 { 172,1335 }, { 173,1335 }, { 174,1335 }, { 175,1335 }, { 176,1335 },
 { 177,1335 }, { 178,1335 }, { 179,1335 }, { 180,1335 }, { 181,1335 },
 { 182,1335 }, { 183,1335 }, { 184,1335 }, { 185,1335 }, { 186,1335 },
 { 187,1335 }, { 188,1335 }, { 189,1335 }, { 190,1335 }, { 191,1335 },
 { 192,1335 }, { 193,1335 }, { 194,1335 }, { 195,1335 }, { 196,1335 },
 { 197,1335 }, { 198,1335 }, { 199,1335 }, { 200,1335 }, { 201,1335 },
 { 202,1335 }, { 203,1335 }, { 204,1335 }, { 205,1335 }, { 206,1335 },
 { 207,1335 }, { 208,1335 }, { 209,1335 }, { 210,1335 }, { 211,1335 },
 { 212,1335 }, { 213,1335 }, { 214,1335 }, { 215,1335 }, { 216,1335 },

 { 217,1335 }, { 218,1335 }, { 219,1335 }, { 220,1335 }, { 221,1335 },
 { 222,1335 }, { 223,1335 }, { 224,1335 }, { 225,1335 }, { 226,1335 },
 { 227,1335 }, { 228,1335 }, { 229,1335 }, { 230,1335 }, { 231,1335 },
 { 232,1335 }, { 233,1335 }, { 234,1335 }, { 235,1335 }, { 236,1335 },
 { 237,1335 }, { 238,1335 }, { 239,1335 }, { 240,1335 }, { 241,1335 },
 { 242,1335 }, { 243,1335 }, { 244,1335 }, { 245,1335 }, { 246,1335 },
 { 247,1335 }, { 248,1335 }, { 249,1335 }, { 250,1335 }, { 251,1335 },
 { 252,1335 }, { 253,1335 }, { 254,1335 }, { 255,1335 }, {   0,  20 },
 {   0,1593 }, {   1,1335 }, {   2,1335 }, {   3,1335 }, {   4,1335 },
 {   5,1335 }, {   6,1335 }, {   7,1335 }, {   8,1335 }, {   9,1335 },

 {   0,   0 }, {  11,1335 }, {  12,1335 }, {   0,   0 }, {  14,1335 },
 {  15,1335 }, {  16,1335 }, {  17,1335 }, {  18,1335 }, {  19,1335 },
 {  20,1335 }, {  21,1335 }, {  22,1335 }, {  23,1335 }, {  24,1335 },
 {  25,1335 }, {  26,1335 }, {  27,1335 }, {  28,1335 }, {  29,1335 },
 {  30,1335 }, {  31,1335 }, {  32,1335 }, {  33,1335 }, {  34,1335 },
 {  35,1335 }, {  36,1335 }, {  37,1335 }, {  38,1335 }, {  39,1335 },
 {  40,1335 }, {  41,1335 }, {  42,1335 }, {  43,1335 }, {  44,1335 },
 {  45,1335 }, {  46,1335 }, {  47,1335 }, {  48,1335 }, {  49,1335 },
 {  50,1335 }, {  51,1335 }, {  52,1335 }, {  53,1335 }, {  54,1335 },
 {  55,1335 }, {  56,1335 }, {  57,1335 }, {  58,1335 }, {  59,1335 },

 {  60,1335 }, {  61,1335 }, {  62,1335 }, {  63,1335 }, {  64,1335 },
 {  65,1335 }, {  66,1335 }, {  67,1335 }, {  68,1335 }, {  69,1335 },
 {  70,1335 }, {  71,1335 }, {  72,1335 }, {  73,1335 }, {  74,1335 },
 {  75,1335 }, {  76,1335 }, {  77,1335 }, {  78,1335 }, {  79,1335 },
 {  80,1335 }, {  81,1335 }, {  82,1335 }, {  83,1335 }, {  84,1335 },
 {  85,1335 }, {  86,1335 }, {  87,1335 }, {  88,1335 }, {  89,1335 },
 {  90,1335 }, {  91,1335 }, {  92,1335 }, {  93,1335 }, {  94,1335 },
 {  95,1335 }, {  96,1335 }, {  97,1335 }, {  98,1335 }, {  99,1335 },
 { 100,1335 }, { 101,1335 }, { 102,1335 }, { 103,1335 }, { 104,1335 },
 { 105,1335 }, { 106,1335 }, { 107,1335 }, { 108,1335 }, { 109,1335 },

 { 110,1335 }, { 111,1335 }, { 112,1335 }, { 113,1335 }, { 114,1335 },
 { 115,1335 }, { 116,1335 }, { 117,1335 }, { 118,1335 }, { 119,1335 },
 { 120,1335 }, { 121,1335 }, { 122,1335 }, { 123,1335 }, { 124,1335 },
 { 125,1335 }, { 126,1335 }, { 127,1335 }, { 128,1335 }, { 129,1335 },
 { 130,1335 }, { 131,1335 }, { 132,1335 }, { 133,1335 }, { 134,1335 },
 { 135,1335 }, { 136,1335 }, { 137,1335 }, { 138,1335 }, { 139,1335 },
 { 140,1335 }, { 141,1335 }, { 142,1335 }, { 143,1335 }, { 144,1335 },
 { 145,1335 }, { 146,1335 }, { 147,1335 }, { 148,1335 }, { 149,1335 },
 { 150,1335 }, { 151,1335 }, { 152,1335 }, { 153,1335 }, { 154,1335 },
 { 155,1335 }, { 156,1335 }, { 157,1335 }, { 158,1335 }, { 159,1335 },

 { 160,1335 }, { 161,1335 }, { 162,1335 }, { 163,1335 }, { 164,1335 },
 { 165,1335 }, { 166,1335 }, { 167,1335 }, { 168,1335 }, { 169,1335 },
 { 170,1335 }, { 171,1335 }, { 172,1335 }, { 173,1335 }, { 174,1335 },
 { 175,1335 }, { 176,1335 }, { 177,1335 }, { 178,1335 }, { 179,1335 },
 { 180,1335 }, { 181,1335 }, { 182,1335 }, { 183,1335 }, { 184,1335 },
 { 185,1335 }, { 186,1335 }, { 187,1335 }, { 188,1335 }, { 189,1335 },
 { 190,1335 }, { 191,1335 }, { 192,1335 }, { 193,1335 }, { 194,1335 },
 { 195,1335 }, { 196,1335 }, { 197,1335 }, { 198,1335 }, { 199,1335 },
 { 200,1335 }, { 201,1335 }, { 202,1335 }, { 203,1335 }, { 204,1335 },
 { 205,1335 }, { 206,1335 }, { 207,1335 }, { 208,1335 }, { 209,1335 },

 { 210,1335 }, { 211,1335 }, { 212,1335 }, { 213,1335 }, { 214,1335 },
 { 215,1335 }, { 216,1335 }, { 217,1335 }, { 218,1335 }, { 219,1335 },
 { 220,1335 }, { 221,1335 }, { 222,1335 }, { 223,1335 }, { 224,1335 },
 { 225,1335 }, { 226,1335 }, { 227,1335 }, { 228,1335 }, { 229,1335 },
 { 230,1335 }, { 231,1335 }, { 232,1335 }, { 233,1335 }, { 234,1335 },
 { 235,1335 }, { 236,1335 }, { 237,1335 }, { 238,1335 }, { 239,1335 },
 { 240,1335 }, { 241,1335 }, { 242,1335 }, { 243,1335 }, { 244,1335 },
 { 245,1335 }, { 246,1335 }, { 247,1335 }, { 248,1335 }, { 249,1335 },
 { 250,1335 }, { 251,1335 }, { 252,1335 }, { 253,1335 }, { 254,1335 },
 { 255,1335 }, {   0,   0 }, {   0,1336 }, {   0,  14 }, {   0,1334 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,-990 }, {  49,-990 }, {  50,-990 }, {  51,-990 }, {  52,-990 },

 {  53,-990 }, {  54,-990 }, {  55,-990 }, {  56,-990 }, {  57,-990 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {   0,   6 }, {   0,1242 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },

 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  45,   0 }, {  46,   0 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 },
 {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 },
 {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 },
 {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 },
 {  89,   0 }, {  90,   0 }, {   0,   6 }, {   0,1150 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,   0 }, {  98,   0 },
 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 },
 { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 },

 { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 },
 { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 },
 { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  45,   0 }, {  46, -92 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,   0 }, {  66,   0 },

 {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 },
 {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 },
 {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 },
 {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 },
 {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 }, {  91, 127 },
 {  92, 127 }, {  93, 127 }, {  94, 127 }, {  95, 127 }, {  96, 127 },
 {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 },
 { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 },
 { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 },
 { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 },

 { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 },
 { 122,   0 }, { 123, 127 }, {   0,   0 }, { 125, 127 }, {   0,   6 },
 {   0,1023 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  45,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 },
 {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 },
 {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 },
 {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 },

 {  90,   0 }, {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 },
 {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 },
 { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 },
 { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 },
 { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 },
 { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 },
 { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 }, {   0,   0 },
 { 125,   0 }, {   0,   9 }, {   0, 896 }, {   1,   0 }, {   2,   0 },
 {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 },
 {   8,   0 }, {   0,   0 }, {   0,   0 }, {  11,   0 }, {  12,   0 },

 {   0,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 },
 {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 },
 {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 },
 {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 }, {   0,   0 },
 {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 },
 {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 },
 {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {  58,   0 }, {  59,   0 }, {  60,   0 }, {  61,   0 }, {  62,   0 },

 {  63,   0 }, {   0,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 },
 {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 },
 {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 },
 {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 },
 {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 },
 {  88,   0 }, {  89,   0 }, {  90,   0 }, {  91,   0 }, {  92,   0 },
 {  93,   0 }, {  94,   0 }, {  95,   0 }, {  96,   0 }, {  97,   0 },
 {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 },
 { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 },
 { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 },

 { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 },
 { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 },
 { 123,   0 }, { 124,   0 }, { 125,   0 }, { 126,   0 }, { 127,   0 },
 { 128,   0 }, { 129,   0 }, { 130,   0 }, { 131,   0 }, { 132,   0 },
 { 133,   0 }, { 134,   0 }, { 135,   0 }, { 136,   0 }, { 137,   0 },
 { 138,   0 }, { 139,   0 }, { 140,   0 }, { 141,   0 }, { 142,   0 },
 { 143,   0 }, { 144,   0 }, { 145,   0 }, { 146,   0 }, { 147,   0 },
 { 148,   0 }, { 149,   0 }, { 150,   0 }, { 151,   0 }, { 152,   0 },
 { 153,   0 }, { 154,   0 }, { 155,   0 }, { 156,   0 }, { 157,   0 },
 { 158,   0 }, { 159,   0 }, { 160,   0 }, { 161,   0 }, { 162,   0 },

 { 163,   0 }, { 164,   0 }, { 165,   0 }, { 166,   0 }, { 167,   0 },
 { 168,   0 }, { 169,   0 }, { 170,   0 }, { 171,   0 }, { 172,   0 },
 { 173,   0 }, { 174,   0 }, { 175,   0 }, { 176,   0 }, { 177,   0 },
 { 178,   0 }, { 179,   0 }, { 180,   0 }, { 181,   0 }, { 182,   0 },
 { 183,   0 }, { 184,   0 }, { 185,   0 }, { 186,   0 }, { 187,   0 },
 { 188,   0 }, { 189,   0 }, { 190,   0 }, { 191,   0 }, { 192,   0 },
 { 193,   0 }, { 194,   0 }, { 195,   0 }, { 196,   0 }, { 197,   0 },
 { 198,   0 }, { 199,   0 }, { 200,   0 }, { 201,   0 }, { 202,   0 },
 { 203,   0 }, { 204,   0 }, { 205,   0 }, { 206,   0 }, { 207,   0 },
 { 208,   0 }, { 209,   0 }, { 210,   0 }, { 211,   0 }, { 212,   0 },

 { 213,   0 }, { 214,   0 }, { 215,   0 }, { 216,   0 }, { 217,   0 },
 { 218,   0 }, { 219,   0 }, { 220,   0 }, { 221,   0 }, { 222,   0 },
 { 223,   0 }, { 224,   0 }, { 225,   0 }, { 226,   0 }, { 227,   0 },
 { 228,   0 }, { 229,   0 }, { 230,   0 }, { 231,   0 }, { 232,   0 },
 { 233,   0 }, { 234,   0 }, { 235,   0 }, { 236,   0 }, { 237,   0 },
 { 238,   0 }, { 239,   0 }, { 240,   0 }, { 241,   0 }, { 242,   0 },
 { 243,   0 }, { 244,   0 }, { 245,   0 }, { 246,   0 }, { 247,   0 },
 { 248,   0 }, { 249,   0 }, { 250,   0 }, { 251,   0 }, { 252,   0 },
 { 253,   0 }, { 254,   0 }, { 255,   0 }, {   0,  11 }, {   0, 639 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  45,   0 },
 {  46,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },

 {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },

 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, {   0,  18 }, {   0, 515 }, {   1,   0 },
 {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 },
 {   7,   0 }, {   8,   0 }, {   9,   0 }, {   0,   0 }, {  11,   0 },
 {  12,   0 }, {   0,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 },
 {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 },
 {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 },
 {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 },

 {   0,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 },
 {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 },
 {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 },
 {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 }, {  61,   0 },
 {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 }, {  66,   0 },
 {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 },
 {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 },
 {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 },

 {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 },
 {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 }, {  91,   0 },
 {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 }, {  96,   0 },
 {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 },
 { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 },
 { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 },
 { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 },
 { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 },
 { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 }, { 126,   0 },
 { 127,   0 }, { 128,   0 }, { 129,   0 }, { 130,   0 }, { 131,   0 },

 { 132,   0 }, { 133,   0 }, { 134,   0 }, { 135,   0 }, { 136,   0 },
 { 137,   0 }, { 138,   0 }, { 139,   0 }, { 140,   0 }, { 141,   0 },
 { 142,   0 }, { 143,   0 }, { 144,   0 }, { 145,   0 }, { 146,   0 },
 { 147,   0 }, { 148,   0 }, { 149,   0 }, { 150,   0 }, { 151,   0 },
 { 152,   0 }, { 153,   0 }, { 154,   0 }, { 155,   0 }, { 156,   0 },
 { 157,   0 }, { 158,   0 }, { 159,   0 }, { 160,   0 }, { 161,   0 },
 { 162,   0 }, { 163,   0 }, { 164,   0 }, { 165,   0 }, { 166,   0 },
 { 167,   0 }, { 168,   0 }, { 169,   0 }, { 170,   0 }, { 171,   0 },
 { 172,   0 }, { 173,   0 }, { 174,   0 }, { 175,   0 }, { 176,   0 },
 { 177,   0 }, { 178,   0 }, { 179,   0 }, { 180,   0 }, { 181,   0 },

 { 182,   0 }, { 183,   0 }, { 184,   0 }, { 185,   0 }, { 186,   0 },
 { 187,   0 }, { 188,   0 }, { 189,   0 }, { 190,   0 }, { 191,   0 },
 { 192,   0 }, { 193,   0 }, { 194,   0 }, { 195,   0 }, { 196,   0 },
 { 197,   0 }, { 198,   0 }, { 199,   0 }, { 200,   0 }, { 201,   0 },
 { 202,   0 }, { 203,   0 }, { 204,   0 }, { 205,   0 }, { 206,   0 },
 { 207,   0 }, { 208,   0 }, { 209,   0 }, { 210,   0 }, { 211,   0 },
 { 212,   0 }, { 213,   0 }, { 214,   0 }, { 215,   0 }, { 216,   0 },
 { 217,   0 }, { 218,   0 }, { 219,   0 }, { 220,   0 }, { 221,   0 },
 { 222,   0 }, { 223,   0 }, { 224,   0 }, { 225,   0 }, { 226,   0 },
 { 227,   0 }, { 228,   0 }, { 229,   0 }, { 230,   0 }, { 231,   0 },

 { 232,   0 }, { 233,   0 }, { 234,   0 }, { 235,   0 }, { 236,   0 },
 { 237,   0 }, { 238,   0 }, { 239,   0 }, { 240,   0 }, { 241,   0 },
 { 242,   0 }, { 243,   0 }, { 244,   0 }, { 245,   0 }, { 246,   0 },
 { 247,   0 }, { 248,   0 }, { 249,   0 }, { 250,   0 }, { 251,   0 },
 { 252,   0 }, { 253,   0 }, { 254,   0 }, { 255,   0 }, {   0,  20 },
 {   0, 258 }, {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 },
 {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 },
 {   0,   0 }, {  11,   0 }, {  12,   0 }, {   0,   0 }, {  14,   0 },
 {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 },
 {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 },

 {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 },
 {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 },
 {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 },
 {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 },
 {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 },
 {  60,   0 }, {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 },
 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 },

 {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 },
 {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 },
 {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 },
 {  90,   0 }, {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 },
 {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 },
 { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 },
 { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 },
 { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 },
 { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 },
 { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 },

 { 125,   0 }, { 126,   0 }, { 127,   0 }, { 128,   0 }, { 129,   0 },
 { 130,   0 }, { 131,   0 }, { 132,   0 }, { 133,   0 }, { 134,   0 },
 { 135,   0 }, { 136,   0 }, { 137,   0 }, { 138,   0 }, { 139,   0 },
 { 140,   0 }, { 141,   0 }, { 142,   0 }, { 143,   0 }, { 144,   0 },
 { 145,   0 }, { 146,   0 }, { 147,   0 }, { 148,   0 }, { 149,   0 },
 { 150,   0 }, { 151,   0 }, { 152,   0 }, { 153,   0 }, { 154,   0 },
 { 155,   0 }, { 156,   0 }, { 157,   0 }, { 158,   0 }, { 159,   0 },
 { 160,   0 }, { 161,   0 }, { 162,   0 }, { 163,   0 }, { 164,   0 },
 { 165,   0 }, { 166,   0 }, { 167,   0 }, { 168,   0 }, { 169,   0 },
 { 170,   0 }, { 171,   0 }, { 172,   0 }, { 173,   0 }, { 174,   0 },

 { 175,   0 }, { 176,   0 }, { 177,   0 }, { 178,   0 }, { 179,   0 },
 { 180,   0 }, { 181,   0 }, { 182,   0 }, { 183,   0 }, { 184,   0 },
 { 185,   0 }, { 186,   0 }, { 187,   0 }, { 188,   0 }, { 189,   0 },
 { 190,   0 }, { 191,   0 }, { 192,   0 }, { 193,   0 }, { 194,   0 },
 { 195,   0 }, { 196,   0 }, { 197,   0 }, { 198,   0 }, { 199,   0 },
 { 200,   0 }, { 201,   0 }, { 202,   0 }, { 203,   0 }, { 204,   0 },
 { 205,   0 }, { 206,   0 }, { 207,   0 }, { 208,   0 }, { 209,   0 },
 { 210,   0 }, { 211,   0 }, { 212,   0 }, { 213,   0 }, { 214,   0 },
 { 215,   0 }, { 216,   0 }, { 217,   0 }, { 218,   0 }, { 219,   0 },
 { 220,   0 }, { 221,   0 }, { 222,   0 }, { 223,   0 }, { 224,   0 },

 { 225,   0 }, { 226,   0 }, { 227,   0 }, { 228,   0 }, { 229,   0 },
 { 230,   0 }, { 231,   0 }, { 232,   0 }, { 233,   0 }, { 234,   0 },
 { 235,   0 }, { 236,   0 }, { 237,   0 }, { 238,   0 }, { 239,   0 },
 { 240,   0 }, { 241,   0 }, { 242,   0 }, { 243,   0 }, { 244,   0 },
 { 245,   0 }, { 246,   0 }, { 247,   0 }, { 248,   0 }, { 249,   0 },
 { 250,   0 }, { 251,   0 }, { 252,   0 }, { 253,   0 }, { 254,   0 },
 { 255,   0 }, {   0,   0 }, { 257,  24 }, {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[17] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[261],
    &yy_transition[519],
    &yy_transition[777],
    &yy_transition[1035],
    &yy_transition[1293],
    &yy_transition[1551],
    &yy_transition[1809],
    &yy_transition[2067],
    &yy_transition[2325],
    &yy_transition[2583],
    &yy_transition[2841],
    &yy_transition[3099],
    &yy_transition[3357],
    &yy_transition[3615],
    &yy_transition[3873],

    } ;

static yyconst flex_int32_t yy_rule_linenum[23] =
    {   0,
      130,  134,  139,  143,  147,  151,  158,  162,  168,  176,
      180,  188,  192,  198,  205,  208,  212,  214,  221,  223,
      234,  240
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
/* *NOTE*: this version of the scanner is rather straight-forward, as it assumes
           a continuous buffer containing the whole frame and hence makes no
           provisions for switching buffers, backing-up and the like. In this
           sense, it is optimized for speed and efficiency */
//#include <stdlib.h>

// *WORKAROUND*
//#include <iostream>
#include <sstream>
#include <string>

// *WORKAROUND*
//using namespace std;
// *IMPORTANT NOTE*: several ACE headers inclue ace/iosfwd.h, which introduces
//                   a problem in conjunction with the standard include headers
//                   when ACE_USES_OLD_IOSTREAMS is defined
//                   --> include the necessary headers manually (see above), and
//                       prevent ace/iosfwd.h from causing any harm
//#define ACE_IOSFWD_H

#include "ace/ace_wchar.h"
#include "ace/OS_Memory.h"

#include <ace/Synch.h>
#include "irc_module_parser.h"
#include "irc_parser_driver.h"

/* *NOTE*: instead of the default (int), this IRC_Scanner_lex returns token_type.
           Unfortunately, yyterminate by default returns 0, which is not of
           token_type. This %define solves that issue. */
#define yyterminate() return yy::IRC_Parser::token::END

/* *NOTE*: YY_DECL is defined elsewhere (needed so the scanner can support
           extra arguments) */
//#define YY_DECL
/* *TODO*: find out why 'read' does not compile (on Linux, flex 2.5.39) */
/* %option c++ yyclass="IRC_Scanner" stack noline bison-bridge */
/*         bison-locations */
/* *IMPORTANT NOTE*: flex 2.5.4 does not recognize 'reentrant, nounistd, */
/*                   ansi-definitions, ansi-prototypes, header-file' */
/* *IMPORTANT NOTE*: 'yylineno' is not compatible with 'read' */
/* *NOTE*: "see RFC 952 [DNS:4] for details on allowed hostnames..."
RFC 952
1. A "name" (Net, Host, Gateway, or Domain name) is a text string up
   to 24 characters drawn from the alphabet (A-Z), digits (0-9), minus
   sign (-), and period (.).  Note that periods are only allowed when
   they serve to delimit components of "domain style names".
RFC 1123
The syntax of a legal Internet host name was specified in RFC-952.
One aspect of host name syntax is hereby changed: the restriction on
the first character is relaxed to allow either a letter or a digit.

And so on...
--> [[:alpha:][:digit:].-] is just a somewhat informed and tolerant suggestion.
    A more CORRECT implementation would probably look something like this...
<hostname>    = <label> | <hostname>.<label>
<label>       = <let-dig> | <let-dig><let-dig> | <let-dig><ldh-string><let-dig>
<ldh-string>  = <let-dig-hyp> | <ldh-string><let-dig-hyp>
<let-dig-hyp> = <let-dig> | '-'
<let-dig>     = <letter> | <digit>
<digit>       = [[:digit:]]
<letter>      = [[:alpha:]]*/
/* LETTER         [[:alpha:]] */
/*LETTER    ==     [a-zA-Z]*/
/* NUMBER         [[:digit:]] */
/*NUMBER    ==     [0-9]*/
/* *NOTE*: violating the spec, some implementations allow '_'... */
/* SPECIAL        [-\[\]\\`^{}_] */
/*ORIGIN         {SERVERNAME}|{NICK}*/
/* *NOTE*: "\r\n" is (ANSI-C) implementation-dependent --> use ASCII codes directly */
/* *NOTE*: in order to pick up the hostname in a sequence "!user[@host] ",
           disallow "@" within a username... */
/* NONWHITE       [\x00-\xFF]{-}[ \t\0\r\n] */
/* USER           {NONWHITE}+ */
/* CHSTRING       ([\x00-\xFF]{-}[ \b\0\x0D\x0A,])+ */
/* MASK           [#$]{([\x00-\xFF]{-}[ \b\0\x0D\x0A,])}+ */
/* CHANNEL        [#&]{([\x00-\xFF]{-}[ \b\0\x0D\x0A,])}+ */
/* CRLF           \x0D\x0A */

#define YY_USER_ACTION yylloc->columns(yyleng);
/* *NOTE*: it seems that the following "exceptions" are allowed:
           - the trailing param does NOT need a ':' prefix IF it doesn't contain
             <SPACE>s...
*/

#define INITIAL 0
#define prefix 1
#define user 2
#define host 3
#define command 4
#define params 5
#define trailing 6
#define end_of_frame 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#define YY_EXTRA_TYPE IRC_ParserDriver*

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals (yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

int IRC_Scanner_lex_init (yyscan_t* scanner);

int IRC_Scanner_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int IRC_Scanner_lex_destroy (yyscan_t yyscanner );

int IRC_Scanner_get_debug (yyscan_t yyscanner );

void IRC_Scanner_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE IRC_Scanner_get_extra (yyscan_t yyscanner );

void IRC_Scanner_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *IRC_Scanner_get_in (yyscan_t yyscanner );

void IRC_Scanner_set_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *IRC_Scanner_get_out (yyscan_t yyscanner );

void IRC_Scanner_set_out  (FILE * _out_str ,yyscan_t yyscanner );

			int IRC_Scanner_get_leng (yyscan_t yyscanner );

char *IRC_Scanner_get_text (yyscan_t yyscanner );

int IRC_Scanner_get_lineno (yyscan_t yyscanner );

void IRC_Scanner_set_lineno (int _line_number ,yyscan_t yyscanner );

int IRC_Scanner_get_column  (yyscan_t yyscanner );

void IRC_Scanner_set_column (int _column_no ,yyscan_t yyscanner );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int IRC_Scanner_wrap (yyscan_t yyscanner );
#else
extern int IRC_Scanner_wrap (yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */

#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int IRC_Scanner_lex (yyscan_t yyscanner);

#define YY_DECL int IRC_Scanner_lex (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			IRC_Scanner_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				IRC_Scanner__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		IRC_Scanner__load_buffer_state(yyscanner );
		}

	{
/* %% [7.0] user's declarations go here */

  yylloc->step();
  yy_flex_debug = driver->getDebugScanner();
  std::stringstream converter;

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yy_start_state_list[yyg->yy_start];
yy_match:
		{
		yyconst struct yy_trans_info *yy_trans_info;

		YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			}
		}

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 23 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 23 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 24 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos + 1;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ yylloc->step();
                             BEGIN(prefix);
                             yylval->ival = 1;
                             return yy::IRC_Parser::token_type(yytext[0]); }
	YY_BREAK
case 2:
YY_RULE_SETUP
{ yylloc->step();
                             BEGIN(end_of_frame);
                             yylval->ival = 1; }
	YY_BREAK
// end <INITIAL>

case 3:
YY_RULE_SETUP
{ yylloc->step();
                             BEGIN(command);
                             yylval->ival = yyleng;
                             return yy::IRC_Parser::token::SPACE; }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ yylloc->step();
                             BEGIN(user);
                             yylval->ival = 1;
                             return yy::IRC_Parser::token_type(yytext[0]); }
	YY_BREAK
case 5:
YY_RULE_SETUP
{ yylloc->step();
                             BEGIN(host);
                             yylval->ival = 1;
                             return yy::IRC_Parser::token_type(yytext[0]); }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ yylloc->step();
                             ACE_NEW_NORETURN(yylval->sval,
                                              std::string);
                             yylval->sval->append(yytext, yyleng);
                             return yy::IRC_Parser::token::ORIGIN; }
	YY_BREAK
// end <prefix>

case 7:
YY_RULE_SETUP
{ yylloc->step();
                             BEGIN(command);
                             yylval->ival = yyleng;
                             return yy::IRC_Parser::token::SPACE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ yylloc->step();
                             BEGIN(host);
                             yylval->ival = 1;
                             ACE_NEW_NORETURN(yylval->sval,
                                              std::string);
                             return yy::IRC_Parser::token_type(yytext[0]); }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ yylloc->step();
                             BEGIN(prefix);
                             ACE_NEW_NORETURN(yylval->sval,
                                              std::string);
                             yylval->sval->append(yytext, yyleng);
                             return yy::IRC_Parser::token::USER; }
	YY_BREAK
// end <user>

case 10:
YY_RULE_SETUP
{ yylloc->step();
                             BEGIN(command);
                             yylval->ival = yyleng;
                             return yy::IRC_Parser::token::SPACE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ yylloc->step();
                             BEGIN(prefix);
                             ACE_NEW_NORETURN(yylval->sval,
                                              std::string);
                             yylval->sval->append(yytext, yyleng);
                             return yy::IRC_Parser::token::HOST; }
	YY_BREAK
// end <host>

case 12:
YY_RULE_SETUP
{ yylloc->step();
                             BEGIN(params);
                             yylval->ival = yyleng;
                             return yy::IRC_Parser::token::SPACE; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ yylloc->step();
                             converter.str(ACE_TEXT_ALWAYS_CHAR(""));
                             converter.clear();
                             converter << yytext;
                             converter >> yylval->ival;
                             return yy::IRC_Parser::token::CMD_NUMERIC; }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ yylloc->step();
                             ACE_NEW_NORETURN(yylval->sval,
                                              std::string);
                             yylval->sval->append(yytext, yyleng);
                             return yy::IRC_Parser::token::CMD_STRING; }
	YY_BREAK
// end <INITIAL, command>

case 15:
YY_RULE_SETUP
{ yylloc->step();
                             yylval->ival = yyleng;
                             return yy::IRC_Parser::token::SPACE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ yylloc->step();
                             BEGIN(trailing);
                             yylval->ival = 1;
                             return yy::IRC_Parser::token_type(yytext[0]); }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ yylloc->step(); /* *NOTE*: non-compliant (see above) */
                             BEGIN(end_of_frame); }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ yylloc->step();
                             ACE_NEW_NORETURN(yylval->sval,
                                              std::string);
                             yylval->sval->append(yytext, yyleng);
                             return yy::IRC_Parser::token::PARAM; }
	YY_BREAK
// end <params>

case 19:
YY_RULE_SETUP
{ yylloc->step();
                             BEGIN(end_of_frame); }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ yylloc->step();
                             if (yyleng > 0)
                             {
                               ACE_NEW_NORETURN(yylval->sval,
                                                std::string);
                               yylval->sval->append(yytext, yyleng);
                               return yy::IRC_Parser::token::PARAM;
                             } // end IF
                           }
	YY_BREAK
// end <trailing>

case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{ yylloc->step();
                             BEGIN(INITIAL);
                             yylval->ival = 2;
                             (*messageCounter)++; }
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(prefix):
case YY_STATE_EOF(user):
case YY_STATE_EOF(host):
case YY_STATE_EOF(command):
case YY_STATE_EOF(params):
case YY_STATE_EOF(trailing):
case YY_STATE_EOF(end_of_frame):
{ yyterminate(); }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
{ /* *TODO*: use (?s:.) ? */
                             yylloc->step();

                             // debug info
                             std::string error_message = ACE_TEXT("invalid character: \"");
                             error_message += yytext[0];
                             error_message += ACE_TEXT("\", aborting");
                             driver->error(*yylloc, error_message);

                             yyterminate(); }
	YY_BREAK
case 23:
YY_RULE_SETUP
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * IRC_Scanner_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( IRC_Scanner_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of IRC_Scanner_lex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					IRC_Scanner_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			IRC_Scanner_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) IRC_Scanner_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yy_start_state_list[yyg->yy_start];

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 256)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = yyg->yy_c_buf_p;

	int yy_c = 256;
	yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					IRC_Scanner_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( IRC_Scanner_wrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void IRC_Scanner_restart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        IRC_Scanner_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            IRC_Scanner__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	IRC_Scanner__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	IRC_Scanner__load_buffer_state(yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void IRC_Scanner__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		IRC_Scanner_pop_buffer_state();
	 *		IRC_Scanner_push_buffer_state(new_buffer);
     */
	IRC_Scanner_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	IRC_Scanner__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (IRC_Scanner_wrap()) processing, but the only time this flag
	 * is looked at is after IRC_Scanner_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void IRC_Scanner__load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE IRC_Scanner__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) IRC_Scanner_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in IRC_Scanner__create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) IRC_Scanner_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in IRC_Scanner__create_buffer()" );

	b->yy_is_our_buffer = 1;

	IRC_Scanner__init_buffer(b,file ,yyscanner);

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with IRC_Scanner__create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void IRC_Scanner__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		IRC_Scanner_free((void *) b->yy_ch_buf ,yyscanner );

	IRC_Scanner_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a IRC_Scanner_restart() or at EOF.
 */
/* %if-c-only */
    static void IRC_Scanner__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	IRC_Scanner__flush_buffer(b ,yyscanner);

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then IRC_Scanner__init_buffer was _probably_
     * called from IRC_Scanner_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void IRC_Scanner__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		IRC_Scanner__load_buffer_state(yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void IRC_Scanner_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	IRC_Scanner_ensure_buffer_stack(yyscanner);

	/* This block is copied from IRC_Scanner__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from IRC_Scanner__switch_to_buffer. */
	IRC_Scanner__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void IRC_Scanner_pop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	IRC_Scanner__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		IRC_Scanner__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void IRC_Scanner_ensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)IRC_Scanner_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in IRC_Scanner_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)IRC_Scanner_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in IRC_Scanner_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE IRC_Scanner__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) IRC_Scanner_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in IRC_Scanner__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	IRC_Scanner__switch_to_buffer(b ,yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to IRC_Scanner_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       IRC_Scanner__scan_bytes() instead.
 */
YY_BUFFER_STATE IRC_Scanner__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return IRC_Scanner__scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to IRC_Scanner_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE IRC_Scanner__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) _yybytes_len + 2;
	buf = (char *) IRC_Scanner_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in IRC_Scanner__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = IRC_Scanner__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in IRC_Scanner__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE IRC_Scanner_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int IRC_Scanner_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int IRC_Scanner_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *IRC_Scanner_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *IRC_Scanner_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int IRC_Scanner_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *IRC_Scanner_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void IRC_Scanner_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void IRC_Scanner_set_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "IRC_Scanner_set_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void IRC_Scanner_set_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "IRC_Scanner_set_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see IRC_Scanner__switch_to_buffer
 */
void IRC_Scanner_set_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void IRC_Scanner_set_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int IRC_Scanner_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void IRC_Scanner_set_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */
/* %endif */

/* User-visible API */

/* IRC_Scanner_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int IRC_Scanner_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) IRC_Scanner_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* IRC_Scanner_lex_init_extra has the same functionality as IRC_Scanner_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to IRC_Scanner_alloc in
 * the yyextra field.
 */

int IRC_Scanner_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    IRC_Scanner_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) IRC_Scanner_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    IRC_Scanner_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from IRC_Scanner_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * IRC_Scanner_lex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* IRC_Scanner_lex_destroy is for both reentrant and non-reentrant scanners. */
int IRC_Scanner_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		IRC_Scanner__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		IRC_Scanner_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	IRC_Scanner_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        IRC_Scanner_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * IRC_Scanner_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    IRC_Scanner_free ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *IRC_Scanner_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *IRC_Scanner_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void IRC_Scanner_free (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see IRC_Scanner_realloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

// #ifdef __cplusplus
// extern "C"
// {
// #endif /* __cplusplus */
// int
// IRCScannerwrap(yyscan_t yyscanner)
// {
//   ACE_TRACE(ACE_TEXT("::IRCScannerwrap"));
//
//   struct yyguts_t* yyg = ACE_static_cast(struct yyguts_t*, yyscanner);
//
//   IRC_ParserDriver* driver = IRC_Client_IRCscanner_get_extra (yyscanner);
//   // sanity check
//   ACE_ASSERT(driver);
//   if (!driver->moreData())
//     return 1;
//
//   // *NOTE*: there SHOULD be more data in a
//   // continuation, so:
//   // 1. gobble/save the rest
//   // 2. switch buffers
//   // 3. unput the rest
//   // 4. continue matching
//
//   // step1
//   std::string the_rest;
//   the_rest += yytext[0];
//   for (char c = yyinput(yyscanner);
//        c != EOF;
//        c = yyinput(yyscanner))
//     the_rest += c;
//
//   ACE_DEBUG((LM_DEBUG,
//              ACE_TEXT("the rest: \"%s\"\n"),
//              the_rest.c_str()));
//
//   // step2
//   if (!driver->switchBuffer())
//   {
//     ACE_DEBUG((LM_ERROR,
//                ACE_TEXT("failed to IRC_ParserDriver::switchBuffer() [data was: \"%s\"], aborting\n"),
//                the_rest.c_str()));
//
//     return 1;
//   } // end IF
//
//   // step3
//   for (std::string::reverse_iterator iterator = the_rest.rbegin();
//        iterator != the_rest.rend();
//        iterator++)
//     unput(*iterator);
//
//   // step4
//  // yymore();
//
//   return 0;
// }
// #ifdef __cplusplus
// }
// #endif /* __cplusplus */

